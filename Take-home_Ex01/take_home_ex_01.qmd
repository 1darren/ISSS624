---
title: "Take-home Exercise 1"
editor: source
---

On this page, I try to pass Prof Kam's class

# 0. Load & Import Relevant Packages

## 0.1 Load Packages

This function calls pacman to load sf, tidyverse, tmap, knitr packages;

-   `tmap` : For thematic mapping; powerful mapping package
-   `sf` : for geospatial data handling, but also geoprocessing: buffer, point-in-polygon count, etc
    -   batch processing over GIS packages; can handle tibble format
-   `sfdep` : creates space-time cube, EHSA; replaces spdep
-   `tidyverse` : for non-spatial data handling; commonly used R package and contains `dplyr` for dataframe manipulation
-   `mapview` : interactive plotting & manipulation
-   `RColorBrewer` : custom colour palettes for manipulation

```{r}
pacman::p_load(tmap, sf, sfdep, tidyverse, mapview, RColorBrewer)
```

## 0.2 Import Data

### 0.2.1 Load Bus Stop Location

-   import bus stop geospatial data into `bus_stop_sf`

    -   convert to svy21 dataframe projection

    ```{r}
    #| code-fold: true
    #| code-summary: "show code"
    raw_bus_stop_sf <- st_read(dsn = "data/geospatial", 
                     layer = "BusStop") %>%
      st_transform(crs = 3414)

    # bus_stop_sf$BUS_STOP_N  <- as.factor(bus_stop_sf$BUS_STOP_N )
    mapview_test_points = mapview(raw_bus_stop_sf, cex = 3, alpha = .5, popup = NULL)
    mapview_test_points
    ```

-   How many rows are repeated?

```{r}
cat("Total number of rows in raw_bus_stop_sf\t\t: ", paste0(length(raw_bus_stop_sf$BUS_STOP_N)))
cat("\nTotal unique bus stop IDs in raw_bus_stop_sf\t: ", paste0(length(unique(raw_bus_stop_sf$BUS_STOP_N))))
cat("\nRepeated bus stops\t\t\t\t:   ", paste0(length(raw_bus_stop_sf$BUS_STOP_N) - length(unique(raw_bus_stop_sf$BUS_STOP_N))))

```

-   It appears there are 16 datapoints that are specifically repeated; let's identify the bus stop numbers with repeated rows:
    -   first we use `filter()` with a pipe mark(using `or` condition) to identify repeated numbers
    -   we sort using `arrange()`
    -   then, using `group_by()` and `row_number()` we add row numbers based on `$BUS_STOP_N`
    -   adding to a new column using `mutate()`

```{r}
#| code-fold: true
#| code-summary: "show code"
repeated_df <- raw_bus_stop_sf %>%
  filter(duplicated(BUS_STOP_N) | duplicated(BUS_STOP_N, fromLast = TRUE)) %>% 
  arrange(BUS_STOP_N) %>%
  group_by(BUS_STOP_N) %>%
  mutate(RowNumber = row_number())
# repeated_df$BUS_STOP_N  <- as.factor(repeated_df$BUS_STOP_N )
repeated_df
```

-   Let's examine these bus stops on the map;
    -   we use `mapview()` to display these repeated bus stops on the map
    -   we use `zcol=$BUS_STOP_N` to give each bus stop an individual colour
    -   we used `colorRampPalette` to expand the palette to 16 different colours

```{r}
#| code-fold: true
#| code-summary: "show code"

cust_palette = colorRampPalette(brewer.pal(11, "Spectral"))

mapview_repeated = mapview(repeated_df, zcol="BUS_STOP_N", cex = 3, alpha = .5, popup = NULL, col.regions=cust_palette)
mapview_repeated
```

-   At this stage, there are 32 entries for 16 bus stops, each with repeated locations

