[
  {
    "objectID": "Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3: Processing & Visualizing Flow Data",
    "section": "",
    "text": "On this page, I address Hands-On Exercise for Lesson 03:"
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_Ex03.html#import-packages",
    "href": "Hands-on_Ex03/Hands-on_Ex03.html#import-packages",
    "title": "Hands-on Exercise 3: Processing & Visualizing Flow Data",
    "section": "1.2 Import packages",
    "text": "1.2 Import packages\n\n\nshow code\npacman::p_load(tmap, sf, DT, stplanr,\n               performance,\n               ggpubr, tidyverse)\n\n\n\nsf, tidyverse, tmap from previous\nNEW:\n\nDT -\nstplanar -\nperformance -\nggpubr -"
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_Ex03.html#preparing-flow-data",
    "href": "Hands-on_Ex03/Hands-on_Ex03.html#preparing-flow-data",
    "title": "Hands-on Exercise 3: Processing & Visualizing Flow Data",
    "section": "1.3 Preparing Flow Data",
    "text": "1.3 Preparing Flow Data\n\n1.3.1 Importing O/D Data\n\n/data/geospatial/Hunan.###: This csv is “Passenger Volume by Origin Destination Bus Stops”, via LTA Datamall\n\nConvert ORIGIN_PT_CODE and DESTINATION_PT_CODE from numeric to character datatype\n\n\n\n\nshow code\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\n\nRows: 5694297 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): YEAR_MONTH, DAY_TYPE, PT_TYPE, ORIGIN_PT_CODE, DESTINATION_PT_CODE\ndbl (2): TIME_PER_HOUR, TOTAL_TRIPS\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nshow code\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\nglimpse(odbus)\n\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 20281, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\n\n\n1.3.2 Extracting study data (Weekday Morning Peak)\n\nuse filter() to select rows by:\n\nfilter for \"WEEKDAY\" using $DAY_TYPE column\nfilter for tap-on between 0600 and 0900 using $TIME_PER_HOUR column\n\ngroup_by identifies O/D flows by bus stop codes\n\nsummarise() aggregates $TOTAL_TRIPS into $TRIPS\n\nwrite_rds() as R data object for future use\n\nto load, read_rds()`\n\n\n\n\nshow code\nodbus6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\n`summarise()` has grouped output by 'ORIGIN_PT_CODE'. You can override using\nthe `.groups` argument.\n\n\nshow code\n## save for future use:\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\ndatatable(head(odbus6_9, 5))"
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_Ex03.html#working-with-geospatial-data",
    "href": "Hands-on_Ex03/Hands-on_Ex03.html#working-with-geospatial-data",
    "title": "Hands-on Exercise 3: Processing & Visualizing Flow Data",
    "section": "1.4 Working with Geospatial Data",
    "text": "1.4 Working with Geospatial Data\n\n1.4.1 Import geospatial data\n\nuse st_read() to import BusStop & MPSZ-2019 as sf dataframe;\n\nst_transform() to transform projection to SVY21 / crs3414\n\n\n\n\nshow code\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\n\nReading layer `BusStop' from data source \n  `C:\\1darren\\ISSS624\\Hands-on_Ex03\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nshow code\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\n\nReading layer `MPSZ-2019' from data source \n  `C:\\1darren\\ISSS624\\Hands-on_Ex03\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\npreview mpsz:\n\n\n\nshow code\nmpsz\n\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26..."
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_Ex03.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex03/Hands-on_Ex03.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 3: Processing & Visualizing Flow Data",
    "section": "1.5. Geospatial Data Wrangling",
    "text": "1.5. Geospatial Data Wrangling\n\nst_intersection() to find find overlap of point (e.g. busstop) and polygon (e.g. mpsz) shapes, creating an sf object output\n\nas part of this, non-SG bus stops are dropped as they fall outside SG/mpsz boundary\nuse select() to only retain two columns, $BUS_STOP_N and $SUBZONE_C\nst_drop_geometry() keeps it a simple dataframe instead of geom sf\n\ndatatable() seems much more useful than kable()\n\n\n\nshow code\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n\nshow code\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.rds\")  \ndatatable(busstop_mpsz)\n\n\n\n\n\n\n\n\nnow we combine planning subzone code to O/D dataset\n\nthis specifically creates the $ORIGIN_SZ column, we’ll need to repeat this for the destination subzone col later\n\n\n\n\nshow code\nod_data = left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\n\nWarning in left_join(odbus6_9, busstop_mpsz, by = c(ORIGIN_PT_CODE = \"BUS_STOP_N\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 25632 of `x` matches multiple rows in `y`.\nℹ Row 673 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\nWe received warning:\n\nWarning: Detected an unexpected many-to-many relationship between `x` and `y`.\n\nFor ‘x’, makes sense, as we have multiple repeats of ORIGIN_PT_CODE (with different DESTINATION_PT_CODE pairs)\nFor ‘y’, this is not surprising; we saw duplicated bus stops in busstop dataset.\n\n\n\nshow code\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\ncat(\"Before cleaning, nrows of duplicate: \", paste0(nrow(duplicate)))\n\n\nBefore cleaning, nrows of duplicate:  1186\n\n\nshow code\nod_data &lt;- unique(od_data)\n\nduplicate2 &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\ncat(\"\\nAfter cleaning, nrows of duplicate: \", paste0(nrow(duplicate2)))\n\n\n\nAfter cleaning, nrows of duplicate:  0\n\n\n\non this second step, we create $DESTIN_SZ column, repeating from the $ORIGIN_SZ step earlier\n\n\n\nshow code\nod_data &lt;- left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\n\nWarning in left_join(od_data, busstop_mpsz, by = c(DESTIN_BS = \"BUS_STOP_N\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 167 of `x` matches multiple rows in `y`.\nℹ Row 672 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nshow code\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\ncat(\"\\nBefore cleaning, nrows of duplicate: \", paste0(nrow(duplicate)))\n\n\n\nBefore cleaning, nrows of duplicate:  1350\n\n\nshow code\nod_data &lt;- unique(od_data)\n\n\n\nduplicate2 &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\ncat(\"\\nAfter cleaning, nrows of duplicate: \", paste0(nrow(duplicate2)), \"\\n\")\n\n\n\nAfter cleaning, nrows of duplicate:  0 \n\n\nshow code\nod_data &lt;- od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\n\n`summarise()` has grouped output by 'ORIGIN_SZ'. You can override using the\n`.groups` argument.\n\n\nshow code\nwrite_rds(od_data, \"data/rds/od_data.rds\")\n# uncomment to load od_data\n# od_data &lt;- read_rds(\"data/rds/od_data.rds\")\n\n\n\nMore repeated destination bus stops (1350) than origin bus stops (1186)"
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_Ex03.html#visualizing-spatial-interaction",
    "href": "Hands-on_Ex03/Hands-on_Ex03.html#visualizing-spatial-interaction",
    "title": "Hands-on Exercise 3: Processing & Visualizing Flow Data",
    "section": "1.6 Visualizing Spatial Interaction",
    "text": "1.6 Visualizing Spatial Interaction\n\nGoal is to visualize inter-mpsz zonal flows\n\n\n1.6.1 Removing intra-zonal flows\n\n\nshow code\nod_data1 &lt;- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]\nglimpse(od_data1)\n\n\nRows: 20,787\nColumns: 3\nGroups: ORIGIN_SZ [310]\n$ ORIGIN_SZ    &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01…\n$ DESTIN_SZ    &lt;chr&gt; \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMSZ06\", \"AMSZ07…\n$ MORNING_PEAK &lt;dbl&gt; 10591, 14980, 3106, 7734, 2306, 1824, 2734, 2300, 164, 93…\n\n\n\n\n1.6.2 Creating desire lines\n\nAptly named “od2line” function for converting od to line object\n\nfrom documentation, first two columns of flow dataframe needs to correspond to first column of zones dataframe\n\n\n\n\nshow code\nflowLine &lt;- od2line(flow = od_data1, \n                    zones = mpsz,\n                    zone_code = \"SUBZONE_C\")\n\n\nCreating centroids representing desire line start and end points.\n\n\n\n\n1.6.3 Visualizing desire lines\n\nuse tm_shape() + tm_lines to create flow lines:\n\n\n\nshow code\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\nWarning in g$scale * (w_legend/maxW): longer object length is not a multiple of\nshorter object length\n\n\nWarning in g$scale * (x/maxW): longer object length is not a multiple of\nshorter object length\n\n\n\n\n\n\nVisualizing only flows with trips &gt; 5000\nI increased the alpha to 0.5 for greater visibility\n\n\n\nshow code\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \n  filter(MORNING_PEAK &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.5)\n\n\nWarning in g$scale * (w_legend/maxW): longer object length is not a multiple of\nshorter object length\n\n\nWarning in g$scale * (x/maxW): longer object length is not a multiple of\nshorter object length"
  }
]