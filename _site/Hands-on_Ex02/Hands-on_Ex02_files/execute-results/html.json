{
  "hash": "0c7e76850b6a6866d8207fb5da9b7f12",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 2: Spatial Weights & Spatial Autocorrelation\"\neditor: visual\n---\n\n\nOn this page, I address Hands-On Exercise for Chapter 02:\n\n-   [**Spatial Weights and Applications**](#import-hunan-shapefile-datasets)\n-   [**Global Measures of Spatial Autocorrelation**](#global-measures-of-spatial-autocorrelation)\n-   [**Local Measures of Spatial Autocorrelation**](Hands-on_Ex02_Local)\n\n# 1. Spatial Weights & Applications\n\n-   Creating `nb` matrix using `QUEEN`/`ROOK` Contiguity\n-   Creating `wm_d62` weight matrix with fixed distance\n    -   Fixed distance found by creating `nb` matrix using knn=1\n-   Creating `rwsm_q` with `style=\"W\"`, row-standardised weight matrix\n    -   this creates `Spatial lag with row-standardized weights`\n    -   also creates `Spatial Window Average`\n-   Creating `rwsm_ids` with `style=\"B\"`, binary weights,\n    -   this creates `Spatial lag as a sum of neighbouring values`\n    -   also creates `Spatial Window Sum`\n\n## 1.2 Import `Hunan` Shapefile datasets {#import-hunan-shapefile-datasets}\n\n### 1.2.1 Geospatial Data Sets\n\n-   `/data/geospatial/Hunan.###`: This is a geospatial data set in ESRI shapefile format.\n\n### 1.2.2 Aspatial Data Sets\n\n-   `/data/aspatial/Hunan_2012.csv`: This csv file contains selected Hunan's local development indicators in 2012.\n\n## 1.3 Import packages & files {#import-packages-files}\n\n-   `hunan`: `sf` data.frame\n-   `hunan2012`: `tbl_df` data.frame\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nprint(\"Importing packages...\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Importing packages...\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\nprint(\"\\nLoading dataset packages...\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"\\nLoading dataset packages...\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Hunan' from data source \n  `C:\\1darren\\ISSS624\\Hands-on_Ex02\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n-   Left join `hunan2012` to `hunan`, select only specific columns\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nhunan <- left_join(hunan,hunan2012)%>%\n  select(1:4, 7, 15)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(County)`\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nprint(\"Previewing first 5 rows of joined, filtered hunan df\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Previewing first 5 rows of joined, filtered hunan df\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nkable(head(hunan, 5))\n```\n\n::: {.cell-output-display}\n|NAME_2  |  ID_3|NAME_3  |ENGTYPE_3   |County  | GDPPC|geometry                       |\n|:-------|-----:|:-------|:-----------|:-------|-----:|:------------------------------|\n|Changde | 21098|Anxiang |County      |Anxiang | 23667|POLYGON ((112.0625 29.75523... |\n|Changde | 21100|Hanshou |County      |Hanshou | 20981|POLYGON ((112.2288 29.11684... |\n|Changde | 21101|Jinshi  |County City |Jinshi  | 34592|POLYGON ((111.8927 29.6013,... |\n|Changde | 21102|Li      |County      |Li      | 24473|POLYGON ((111.3731 29.94649... |\n|Changde | 21103|Linli   |County      |Linli   | 25554|POLYGON ((111.6324 29.76288... |\n:::\n:::\n\n\n## 1.4 Visualisation with qtm next to basemap\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5) +\n  tm_layout(main.title = \"basemap of Hunan\")\n\ngdppc <- qtm(hunan, \"GDPPC\")  +\n  tm_layout(main.title = \"GDPPC Quintile Map\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## 1.5 Contiguity Spatial Weights {#contiguity-spatial-weights}\n\n-   There are 2 types of contiguity, based on chess pieces\n    -   `QUEEN` two regions are contiguous if they share a vertex;\n    -   `ROOK` two regions are contiguous if they share an edge;\n-   Literature suggests they are mostly similar, but `QUEEN` is more robust at capturing neighbouring/contiguity more consistently\n\n#### 1.5.1 `QUEEN` Contiguity Neighbours\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n```\n:::\n:::\n\n\nIdentifying all neighbours of most connected region:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"Most connected region, 85:\", hunan$County[85], \"\\nNeighbours:\\n\\t\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMost connected region, 85: Taoyuan \nNeighbours:\n\t\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nwm_q[[85]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  5  6 32 56 57 69 75 78\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\nPreviewing neighbours:\\n\\n>> ID\\t|  Name \\t| GDPPC  \\t|  Neighbours:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nPreviewing neighbours:\n\n>> ID\t|  Name \t| GDPPC  \t|  Neighbours:\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nfor (value in wm_q[[85]]){\n  cat(\"\\n>> \", value, \"\\t|\", hunan$County[value], \"  \\t|\", hunan$GDPPC[value], \"  \\t|\", wm_q[[value]])\n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n>>  1 \t| Anxiang   \t| 23667   \t| 2 3 4 57 85\n>>  2 \t| Hanshou   \t| 20981   \t| 1 57 58 78 85\n>>  3 \t| Jinshi   \t| 34592   \t| 1 4 5 85\n>>  5 \t| Linli   \t| 25554   \t| 3 4 6 85\n>>  6 \t| Shimen   \t| 27137   \t| 4 5 69 75 85\n>>  32 \t| Yuanling   \t| 24194   \t| 24 31 50 54 55 56 75 85\n>>  56 \t| Anhua   \t| 14567   \t| 8 31 32 36 78 80 85\n>>  57 \t| Nan   \t| 21311   \t| 1 2 58 64 76 85\n>>  69 \t| Cili   \t| 18714   \t| 6 75 85\n>>  75 \t| Sangzhi   \t| 14624   \t| 6 32 53 55 69 85\n>>  78 \t| Taojiang   \t| 19509   \t| 2 8 9 56 58 68 85\n```\n:::\n:::\n\n\n-   Print adjacency matrix with `str` (warning: long!)\n\n::: {.callout-caution collapse=\"true\"}\n## Expand to see adjacency weight matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n```\n:::\n:::\n\n:::\n\n#### 1.5.2 `ROOK` Contiguity Neighbours\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n```\n:::\n:::\n\n\n-   Which of Taoyuan's neighbours is now missing?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetdiff(wm_q[[85]], wm_r[[85]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 57\n```\n:::\n\n```{.r .cell-code}\nhunan$County[[57]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Nan\"\n```\n:::\n:::\n\n\n-   This is the difference between `ROOK` & `QUEEN`: Taoyuan & Nan share only a vertex, no edges ![Alt text](taoyuan-nan.jpg)\n\n### 1.5.3 Exploring Contiguity Weights\n\n-   Get `latitude`, `longtiude` by\n    -   `map_dbl` retrieving double-precision datatype via map function on `geometry` column of `hunan`\n    -   use `st_centroid` to find centroid of each row\n    -   indexing via \\[\\[1\\]\\], \\[\\[2\\] for long,lat of centroid\n    -   retrieving a vector of regions\n-   `cbind` combines separate vectors back into single dataframe (`coords`)with two columns\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\ncat(\"Printing first 6 rows of `coords`:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrinting first 6 rows of `coords`:\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nhead(coords)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n```\n:::\n:::\n\n\n-   now using centroid vertices, we plot:\n    -   plot QUEEN-contiguity map\n    -   plot ROOK-contiguity map\n    -   plot differences (i.e. ROOK overlapping Queen)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\npar(mfrow=c(1,3), lty = 2, lwd = 2)\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\ntitle(\"QUEEN Contiguity\")\nbox()\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"blue\", main=\"Rook Contiguity\")\ntitle(\"ROOK Contiguity\")\nbox()\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"blue\", main=\"Rook Contiguity\")\ntitle(\"Differences:\")\nbox()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## 1.6 Distance-based neighbours\n\n### 1.6.1 Identifying max inter-neighbour distance\n\n-   `k1` created by parsing\n    -   `knearneigh` returns matrix of k (default=1) nearest neighbours's index based on `coords`, apparently in `knn` object\n    -   `knn2nb` converts k-nearest-neighbours to neighbours-list in `nb` class\n-   `unlist` unbinds list structure of output into vector\n    -   `nbdists` takes in `nb` neighbours list and returns euclidean distances between neighbours in same structure\n-   all this searches the greatest neighbour distance (max 61.79 below) to ensure each region has at least one neighbour\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\n# coords <- coordinates(hunan) #following previous steps\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\ncat(\"Printing summary stats for k-1 distances\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrinting summary stats for k-1 distances\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nsummary(k1dists)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n```\n:::\n:::\n\n\n### 1.6.2 Creating fixed distance weight matrix\n\n-   `dnearneigh` returns list of vectors of regions satisfying distance criteria (eg within max neighbour distance)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\ncat(\"Printing details of distance weight matrix\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrinting details of distance weight matrix\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nwm_d62\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\nInspecting first six rows of [wm_d62] obj \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nInspecting first six rows of [wm_d62] obj \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(str(head(wm_d62, n=6)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 6\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\n^ Note how 6th row only has one neighbour, i.e. region 69\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n^ Note how 6th row only has one neighbour, i.e. region 69\n```\n:::\n:::\n\n\n::: callout-note\n## **Quiz**: What is the meaning of \"Average number of links: 3.681818\" shown above?\n\n-   Each region has 3.68 links on average, i.e. (total number of links) / (total number of regions)\n:::\n\n-   Alternative structure (warning: long!)\n    -   this uses `table` to combine the column name from `hunan$Country` with `wm_d62`\n    -   `card` apparently looks at the length of the neighbour list and prints 1 if yes, 0 if no (i.e. Anhua has `1` neighobur, Anren has `4`)\n-   Warning, long table!\n\n::: {.callout-caution collapse=\"true\"}\n## (Warning, long!) Expand to read adjacency weight matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(hunan$County, card(wm_d62))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n```\n:::\n:::\n\n:::\n\n### 1.6.2x Unfinished Disjoint subgraph plot\n\n-   this section was tucked right above [8.6.2.1](https://r4gdsa.netlify.app/chap08#plotting-fixed-distance-weight-matrix) without explanation\n-   `n.comp.nb()` finds the number of disjoint connected subgraphs [\\[see source\\]](https://r-spatial.github.io/spdep/reference/compon.html)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nn_comp <- n.comp.nb(wm_d62)\ncat(\"Number of disjoint subgraphs:\", n_comp$nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of disjoint subgraphs: 1\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\nTable of disjoint subgraphs by region:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nTable of disjoint subgraphs by region:\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ntable(n_comp$comp.id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n 1 \n88 \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"^ i.e. 88 regions all report 1 distjoint subgraph, i.e. no region is disjoint\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n^ i.e. 88 regions all report 1 distjoint subgraph, i.e. no region is disjoint\n```\n:::\n:::\n\n\n#### 1.6.2.1 Plotting fixed distance weight matrix\n\n-   Plot background of `hunan$Geometry`\n-   Plot points of centroids in `coords`, connected by black lines\n-   Plot k=1-nearest-neighbours (i.e. show nearest neighbours as in `k1`) in red lines on top;\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\ntitle(\"Comparing fixed-distance neighbours (black)\\nvs 1st-nearest-neighbours (red)\")\nbox()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n-   Side-by-side comparison:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\ntitle(\"1st Nearest Neighbours\")\nbox()\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")\ntitle(\"Distance-Based Neighbours\")\nbox()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### 1.6.3 Exploring Contiguity Weights\n\n-   Now calculating 6 nearest neighbours via `knn` algorithm\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nknn6 <- knn2nb(knearneigh(coords, k=6))\ncat(\"Printing details of knn neighbour matrix, k=6 \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrinting details of knn neighbour matrix, k=6 \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nknn6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\nInspecting first six rows of [knn6] obj \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nInspecting first six rows of [knn6] obj \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(str(head(knn6, n=6)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 6\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\n^ Note how every row now has 6 neighbours exactly.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n^ Note how every row now has 6 neighbours exactly.\n```\n:::\n:::\n\n\n-   Here's what it looks like instead:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st Nearest Neighbours\")\nplot(k1, coords, pch = 19, cex = 0.6, add=TRUE, col=\"red\", length=0.08)\nbox()\n\n\nplot(hunan$geometry, border=\"lightgrey\", main =\"6st Nearest Neighbours\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\nbox()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## 1.7 Using Inversed Distance to plot neighbour\n\n-   Starting with `wm_q` for queen contiguity, `coords` for centroids\n    -   `nbdists` takes in `nb` neighbours list and returns euclidean distances between neighbours in same structure\n    -   `longlat` uses [Great Circle distances](https://en.wikipedia.org/wiki/Great-circle_distance) i.e. distance on a round earth instead of flat map\n-   `lapply` `function(x)` applies inverse (1/x) to all output distances\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\ncat(\"\\nInspecting first five rows of [ids] obj \\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nInspecting first five rows of [ids] obj \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nhead(ids, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n```\n:::\n:::\n\n\n### 1.7.1 Creating row-standardised weight matrix {#creating-row-standardised-weight-matrix}\n\n-   `style \"W\"` gives equal weight to each neighbour (e.g. 0.125 for 8 neighbours, below)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\nInspecting weights for region 10, with 8 neighbours: \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nInspecting weights for region 10, with 8 neighbours: \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nrswm_q$weights[10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n```\n:::\n:::\n\n\n-   `style \"B\"` performs standardisation based on row distance\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\nPrinting summary stats for row-standardised weights matrix \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nPrinting summary stats for row-standardised weights matrix \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nsummary(unlist(rswm_ids$weights))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\nInspecting weights for region 10, with 8 neighbours: \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nInspecting weights for region 10, with 8 neighbours: \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nrswm_ids$weights[10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n```\n:::\n:::\n\n\n## 1.8 Making use of spatial weight matrix\n\n### 1.8.1 Spatial lag with row-standardized weights\n\n::: callout-note\n## **Quiz**: Can you see the meaning of Spatial lag with row-standardized weights now?\n\n-   **Spatial lag** as a concept describes how spatially-neighbouring regions affect each other\n    -   Use of row-standardised weights assigns weights to neighbours based on proximity (i.e. nearer neighbour affects more)\n    -   It's one way to calculate spatial lag, using distance to weight importance of neighbours\n:::\n\n-   Calculating `spatially lagged GDPPC` values\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\n\n\ncat(\"\\nInspecting first 5 values for `Average Neighbour GDPPC`: \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nInspecting first 5 values for `Average Neighbour GDPPC`: \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nhead(GDPPC.lag, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24847.20 22724.80 24143.25 27737.50 27270.25\n```\n:::\n:::\n\n\n-   Creating `lag.res` dataframe with regionname and `lag GDPPC` value\n    -   `NAME_3` column created for ease of left-join with `hunan`\n-   `left_join` to create table of rows of region-neighbour-lag GDPPC-geometry\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\n\ncat(\"\\nInspecting first row for `lag.res` : \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nInspecting first row for `lag.res` : \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(str(lag.res[1]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t88 obs. of  1 variable:\n $ NAME_3: chr  \"Anxiang\" \"Hanshou\" \"Jinshi\" \"Li\" ...\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\nShowing first 6 rows for joined `hunan +lag.res` : \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nShowing first 6 rows for joined `hunan +lag.res` : \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nhunan <- left_join(hunan,lag.res)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(NAME_3)`\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nhead(hunan)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n```\n:::\n:::\n\n\n-   Visual comparison of regional GDPPC and spatial lag GDPPC\n    -   Adjusted colour breaks to use comparable scale -- MAPS CAN LIE! as Prof Kam says\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ngdppc <- qtm(hunan, \"GDPPC\") +\n  tm_layout(main.title = \"GDPPC\", main.title.position = \"right\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\",\n                  fill.style=\"fixed\",fill.breaks=c(0,20000,40000,60000,80000,100000)) +\n  tm_layout(main.title = \"lag GDPPC\", main.title.position = \"right\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### 1.8.2 spatial lag as a sum of neighbouring values\n\n-   Using binary weights (0/1) to create `spatial lag` as a simple unweighted sum\n\n    -   use of `nb2listw`, `style = \"B\"` from before:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\n    b_weights <- lapply(wm_q, function(x) 0*x + 1)\n    b_weights2 <- nb2listw(wm_q, \n                           glist = b_weights, \n                           style = \"B\")\n    b_weights2\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    Characteristics of weights list object:\n    Neighbour list object:\n    Number of regions: 88 \n    Number of nonzero links: 448 \n    Percentage nonzero weights: 5.785124 \n    Average number of links: 5.090909 \n    \n    Weights style: B \n    Weights constants summary:\n       n   nn  S0  S1    S2\n    B 88 7744 448 896 10224\n    ```\n    :::\n    :::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\ncat(\"Printing first five rows of lag_sum\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrinting first five rows of lag_sum\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nfor (i in 1:5) {\n  print(str(c(i, lag_sum[[1]][[i]], lag_sum[[2]][[i]])))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:3] \"1\" \"Anxiang\" \"124236\"\nNULL\n chr [1:3] \"2\" \"Hanshou\" \"113624\"\nNULL\n chr [1:3] \"3\" \"Jinshi\" \"96573\"\nNULL\n chr [1:3] \"4\" \"Li\" \"110950\"\nNULL\n chr [1:3] \"5\" \"Linli\" \"109081\"\nNULL\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nhunan <- left_join(hunan, lag.res)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(NAME_3)`\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ngdppc <- qtm(hunan, \"GDPPC\",\n             fill.style=\"fixed\", fill.breaks=c(0,20000,40000,60000,80000,100000, 200000, 300000, 400000, 500000)) +\n  tm_layout(main.title = \"GDPPC\", main.title.position = \"right\")\n\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\",\n                     fill.style=\"fixed\", fill.breaks=c(0,20000,40000,60000,80000,100000, 200000, 300000, 400000, 500000)\n                     ) +\n  tm_layout(main.title = \"lag_sum GDPPC\", main.title.position = \"right\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## **Quiz**: Can you understand the meaning of Spatial lag as a sum of neighboring values now?\n\n-   Unlike before, here the spatial lag GDPP is calculated simply as a sum of neighbouring regions; this looks less accurate\n    -   more neighbours, more spatial lag; leads to huge disparity if one region has 8 neighbours and one region has only 1\n    -   note that often the scale is up to 10x the GDPPC; harder to compare values\n:::\n\n### 1.8.3 Spatial window average\n\n-   `Spatial Window Average` is row-standardised weights + self (\"diagonal element\")\n    -   area\\[1\\] now has an additional 'neighbour', itself, for use in calculating row-standardised weights\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nwm_qs <- include.self(wm_q)\nwm_qs <- nb2listw(wm_qs)\nwm_qs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n```\n:::\n:::\n\n\n-   Now we create lag variable, as before;\n    -   `lag.listw` calculates lag value\n    -   `as.data.frame()` and `list()` converts into dataframe\n    -   `colnames` renames columns to `NAME_3`, `lag_window_avg GDPPC` for ease of left joining\n-   Maybe I should've used `kable()` to display my values instead of using `cat` to print:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nlag_w_avg_gpdpc <- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res <- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\nhunan <- left_join(hunan, lag_wm_qs.res)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(NAME_3)`\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"Displaying table of modified values:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDisplaying table of modified values:\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nhunan %>%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_sum GDPPC\",\n         \"lag_window_avg GDPPC\") %>%\n  kable()\n```\n\n::: {.cell-output-display}\n|County        | lag GDPPC| lag_sum GDPPC| lag_window_avg GDPPC|geometry                       |\n|:-------------|---------:|-------------:|--------------------:|:------------------------------|\n|Anxiang       |  24847.20|        124236|             24650.50|POLYGON ((112.0625 29.75523... |\n|Hanshou       |  22724.80|        113624|             22434.17|POLYGON ((112.2288 29.11684... |\n|Jinshi        |  24143.25|         96573|             26233.00|POLYGON ((111.8927 29.6013,... |\n|Li            |  27737.50|        110950|             27084.60|POLYGON ((111.3731 29.94649... |\n|Linli         |  27270.25|        109081|             26927.00|POLYGON ((111.6324 29.76288... |\n|Shimen        |  21248.80|        106244|             22230.17|POLYGON ((110.8825 30.11675... |\n|Liuyang       |  43747.00|        174988|             47621.20|POLYGON ((113.9905 28.5682,... |\n|Ningxiang     |  33582.71|        235079|             37160.12|POLYGON ((112.7181 28.38299... |\n|Wangcheng     |  45651.17|        273907|             49224.71|POLYGON ((112.7914 28.52688... |\n|Anren         |  32027.62|        256221|             29886.89|POLYGON ((113.1757 26.82734... |\n|Guidong       |  32671.00|         98013|             26627.50|POLYGON ((114.1799 26.20117... |\n|Jiahe         |  20810.00|        104050|             22690.17|POLYGON ((112.4425 25.74358... |\n|Linwu         |  25711.50|        102846|             25366.40|POLYGON ((112.5914 25.55143... |\n|Rucheng       |  30672.33|         92017|             25825.75|POLYGON ((113.6759 25.87578... |\n|Yizhang       |  33457.75|        133831|             30329.00|POLYGON ((113.2621 25.68394... |\n|Yongxing      |  31689.20|        158446|             32682.83|POLYGON ((113.3169 26.41843... |\n|Zixing        |  20269.00|        141883|             25948.62|POLYGON ((113.7311 26.16259... |\n|Changning     |  23901.60|        119508|             23987.67|POLYGON ((112.6144 26.60198... |\n|Hengdong      |  25126.17|        150757|             25463.14|POLYGON ((113.1056 27.21007... |\n|Hengnan       |  21903.43|        153324|             21904.38|POLYGON ((112.7599 26.98149... |\n|Hengshan      |  22718.60|        113593|             23127.50|POLYGON ((112.607 27.4689, ... |\n|Leiyang       |  25918.80|        129594|             25949.83|POLYGON ((112.9996 26.69276... |\n|Qidong        |  20307.00|        142149|             20018.75|POLYGON ((111.7818 27.0383,... |\n|Chenxi        |  20023.80|        100119|             19524.17|POLYGON ((110.2624 28.21778... |\n|Zhongfang     |  16576.80|         82884|             18955.00|POLYGON ((109.9431 27.72858... |\n|Huitong       |  18667.00|         74668|             17800.40|POLYGON ((109.9419 27.10512... |\n|Jingzhou      |  14394.67|         43184|             15883.00|POLYGON ((109.8186 26.75842... |\n|Mayang        |  19848.80|         99244|             18831.33|POLYGON ((109.795 27.98008,... |\n|Tongdao       |  15516.33|         46549|             14832.50|POLYGON ((109.9294 26.46561... |\n|Xinhuang      |  20518.00|         20518|             17965.00|POLYGON ((109.227 27.43733,... |\n|Xupu          |  17572.00|        140576|             17159.89|POLYGON ((110.7189 28.30485... |\n|Yuanling      |  15200.12|        121601|             16199.44|POLYGON ((110.9652 28.99895... |\n|Zhijiang      |  18413.80|         92069|             18764.50|POLYGON ((109.8818 27.60661... |\n|Lengshuijiang |  14419.33|         43258|             26878.75|POLYGON ((111.5307 27.81472... |\n|Shuangfeng    |  24094.50|        144567|             23188.86|POLYGON ((112.263 27.70421,... |\n|Xinhua        |  22019.83|        132119|             20788.14|POLYGON ((111.3345 28.19642... |\n|Chengbu       |  12923.50|         51694|             12365.20|POLYGON ((110.4455 26.69317... |\n|Dongan        |  14756.00|         59024|             15985.00|POLYGON ((111.4531 26.86812... |\n|Dongkou       |  13869.80|         69349|             13764.83|POLYGON ((110.6622 27.37305... |\n|Longhui       |  12296.67|         73780|             11907.43|POLYGON ((110.985 27.65983,... |\n|Shaodong      |  15775.17|         94651|             17128.14|POLYGON ((111.9054 27.40254... |\n|Suining       |  14382.86|        100680|             14593.62|POLYGON ((110.389 27.10006,... |\n|Wugang        |  11566.33|         69398|             11644.29|POLYGON ((110.9878 27.03345... |\n|Xinning       |  13199.50|         52798|             12706.00|POLYGON ((111.0736 26.84627... |\n|Xinshao       |  23412.00|        140472|             21712.29|POLYGON ((111.6013 27.58275... |\n|Shaoshan      |  39541.00|        118623|             43548.25|POLYGON ((112.5391 27.97742... |\n|Xiangxiang    |  36186.60|        180933|             35049.00|POLYGON ((112.4549 28.05783... |\n|Baojing       |  16559.60|         82798|             16226.83|POLYGON ((109.7015 28.82844... |\n|Fenghuang     |  20772.50|         83090|             19294.40|POLYGON ((109.5239 28.19206... |\n|Guzhang       |  19471.20|         97356|             18156.00|POLYGON ((109.8968 28.74034... |\n|Huayuan       |  19827.33|         59482|             19954.75|POLYGON ((109.5647 28.61712... |\n|Jishou        |  15466.80|         77334|             18145.17|POLYGON ((109.8375 28.4696,... |\n|Longshan      |  12925.67|         38777|             12132.75|POLYGON ((109.6337 29.62521... |\n|Luxi          |  18577.17|        111463|             18419.29|POLYGON ((110.1067 28.41835... |\n|Yongshun      |  14943.00|         74715|             14050.83|POLYGON ((110.0003 29.29499... |\n|Anhua         |  24913.00|        174391|             23619.75|POLYGON ((111.6034 28.63716... |\n|Nan           |  25093.00|        150558|             24552.71|POLYGON ((112.3232 29.46074... |\n|Yuanjiang     |  24428.80|        122144|             24733.67|POLYGON ((112.4391 29.1791,... |\n|Jianghua      |  17003.00|         68012|             16762.60|POLYGON ((111.6461 25.29661... |\n|Lanshan       |  21143.75|         84575|             20932.60|POLYGON ((112.2286 25.61123... |\n|Ningyuan      |  20435.00|        143045|             19467.75|POLYGON ((112.0715 26.09892... |\n|Shuangpai     |  17131.33|         51394|             18334.00|POLYGON ((111.8864 26.11957... |\n|Xintian       |  24569.75|         98279|             22541.00|POLYGON ((112.2578 26.0796,... |\n|Huarong       |  23835.50|         47671|             26028.00|POLYGON ((112.9242 29.69134... |\n|Linxiang      |  26360.00|         26360|             29128.50|POLYGON ((113.5502 29.67418... |\n|Miluo         |  47383.40|        236917|             46569.00|POLYGON ((112.9902 29.02139... |\n|Pingjiang     |  55157.75|        220631|             47576.60|POLYGON ((113.8436 29.06152... |\n|Xiangyin      |  37058.00|        185290|             36545.50|POLYGON ((112.9173 28.98264... |\n|Cili          |  21546.67|         64640|             20838.50|POLYGON ((110.8822 29.69017... |\n|Chaling       |  23348.67|         70046|             22531.00|POLYGON ((113.7666 27.10573... |\n|Liling        |  42323.67|        126971|             42115.50|POLYGON ((113.5673 27.94346... |\n|Yanling       |  28938.60|        144693|             27619.00|POLYGON ((113.9292 26.6154,... |\n|You           |  25880.80|        129404|             27611.33|POLYGON ((113.5879 27.41324... |\n|Zhuzhou       |  47345.67|        284074|             44523.29|POLYGON ((113.2493 28.02411... |\n|Sangzhi       |  18711.33|        112268|             18127.43|POLYGON ((110.556 29.40543,... |\n|Yueyang       |  29087.29|        203611|             28746.38|POLYGON ((113.343 29.61064,... |\n|Qiyang        |  20748.29|        145238|             20734.50|POLYGON ((111.5563 26.81318... |\n|Taojiang      |  35933.71|        251536|             33880.62|POLYGON ((112.0508 28.67265... |\n|Shaoyang      |  15439.71|        108078|             14716.38|POLYGON ((111.5013 27.30207... |\n|Lianyuan      |  29787.50|        238300|             28516.22|POLYGON ((111.6789 28.02946... |\n|Hongjiang     |  18145.00|        108870|             18086.14|POLYGON ((110.1441 27.47513... |\n|Hengyang      |  21617.00|        108085|             21244.50|POLYGON ((112.7144 26.98613... |\n|Guiyang       |  29203.89|        262835|             29568.80|POLYGON ((113.0811 26.04963... |\n|Changsha      |  41363.67|        248182|             48119.71|POLYGON ((112.9421 28.03722... |\n|Taoyuan       |  22259.09|        244850|             22310.75|POLYGON ((112.0612 29.32855... |\n|Xiangtan      |  44939.56|        404456|             43151.60|POLYGON ((113.0426 27.8942,... |\n|Dao           |  16902.00|         67608|             17133.40|POLYGON ((111.498 25.81679,... |\n|Jiangyong     |  16930.00|         33860|             17009.33|POLYGON ((111.3659 25.39472... |\n:::\n:::\n\n\n-   Now comparing `lag_gdppc` and `w_ave_gdppc` on the same colour scale\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nlag_gdppc <- qtm(hunan, \"lag GDPPC\",\n                  fill.style=\"fixed\",fill.breaks=c(10000,20000,30000,40000,50000,60000),\n                 legend.text.size = 0.5,legend.title.size = 0.5\n                 ) +\n  tm_layout(main.title = \"Lag GDPPC\", main.title.position = \"right\")\n\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\",\n                   fill.style=\"fixed\", fill.breaks=c(10000,20000,30000,40000,50000,60000),\n                   legend.text.size = 0.5,legend.title.size = 0.5\n                   ) +\n  tm_layout(main.title = \"lag_window_avg GDPPC\", main.title.position = \"right\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n### 1.8.4 Spatial Window Sum\n\n-   Simple `sum of neighbouring values` including self/diagonal value\n    -   `lapply` to create matrix of ones in shape of `nb` structure\n    -   use of `nb2listw` to assign a weights list object according to `nb` shape\n-   use of `lag.listw()` to create lag variable for each region\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nwm_qs <- include.self(wm_q) # Run above \nb_weights <- lapply(wm_qs, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\n\ncat(\"Printing first five rows of w_sum_gdppc\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrinting first five rows of w_sum_gdppc\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nfor (i in 1:5) {\n  print(str(c(i, w_sum_gdppc[[1]][[i]], w_sum_gdppc[[2]][[i]])))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:3] \"1\" \"Anxiang\" \"147903\"\nNULL\n chr [1:3] \"2\" \"Hanshou\" \"134605\"\nNULL\n chr [1:3] \"3\" \"Jinshi\" \"131165\"\nNULL\n chr [1:3] \"4\" \"Li\" \"135423\"\nNULL\n chr [1:3] \"5\" \"Linli\" \"134635\"\nNULL\n```\n:::\n:::\n\n\n-   Then, just as before, convert using `as.data.frame()`, rename with `col_names` and `left_join` into huge `hunan` \"sf\" data.frame\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\nhunan <- left_join(hunan, w_sum_gdppc.res)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(NAME_3)`\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nhunan %>%\n  select(\"County\", \n         \"GDPPC\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\",\n         \"lag_sum GDPPC\",\n         \"w_sum GDPPC\") %>%\n  kable()\n```\n\n::: {.cell-output-display}\n|County        | GDPPC| lag GDPPC| lag_window_avg GDPPC| lag_sum GDPPC| w_sum GDPPC|geometry                       |\n|:-------------|-----:|---------:|--------------------:|-------------:|-----------:|:------------------------------|\n|Anxiang       | 23667|  24847.20|             24650.50|        124236|      147903|POLYGON ((112.0625 29.75523... |\n|Hanshou       | 20981|  22724.80|             22434.17|        113624|      134605|POLYGON ((112.2288 29.11684... |\n|Jinshi        | 34592|  24143.25|             26233.00|         96573|      131165|POLYGON ((111.8927 29.6013,... |\n|Li            | 24473|  27737.50|             27084.60|        110950|      135423|POLYGON ((111.3731 29.94649... |\n|Linli         | 25554|  27270.25|             26927.00|        109081|      134635|POLYGON ((111.6324 29.76288... |\n|Shimen        | 27137|  21248.80|             22230.17|        106244|      133381|POLYGON ((110.8825 30.11675... |\n|Liuyang       | 63118|  43747.00|             47621.20|        174988|      238106|POLYGON ((113.9905 28.5682,... |\n|Ningxiang     | 62202|  33582.71|             37160.12|        235079|      297281|POLYGON ((112.7181 28.38299... |\n|Wangcheng     | 70666|  45651.17|             49224.71|        273907|      344573|POLYGON ((112.7914 28.52688... |\n|Anren         | 12761|  32027.62|             29886.89|        256221|      268982|POLYGON ((113.1757 26.82734... |\n|Guidong       |  8497|  32671.00|             26627.50|         98013|      106510|POLYGON ((114.1799 26.20117... |\n|Jiahe         | 32091|  20810.00|             22690.17|        104050|      136141|POLYGON ((112.4425 25.74358... |\n|Linwu         | 23986|  25711.50|             25366.40|        102846|      126832|POLYGON ((112.5914 25.55143... |\n|Rucheng       | 11286|  30672.33|             25825.75|         92017|      103303|POLYGON ((113.6759 25.87578... |\n|Yizhang       | 17814|  33457.75|             30329.00|        133831|      151645|POLYGON ((113.2621 25.68394... |\n|Yongxing      | 37651|  31689.20|             32682.83|        158446|      196097|POLYGON ((113.3169 26.41843... |\n|Zixing        | 65706|  20269.00|             25948.62|        141883|      207589|POLYGON ((113.7311 26.16259... |\n|Changning     | 24418|  23901.60|             23987.67|        119508|      143926|POLYGON ((112.6144 26.60198... |\n|Hengdong      | 27485|  25126.17|             25463.14|        150757|      178242|POLYGON ((113.1056 27.21007... |\n|Hengnan       | 21911|  21903.43|             21904.38|        153324|      175235|POLYGON ((112.7599 26.98149... |\n|Hengshan      | 25172|  22718.60|             23127.50|        113593|      138765|POLYGON ((112.607 27.4689, ... |\n|Leiyang       | 26105|  25918.80|             25949.83|        129594|      155699|POLYGON ((112.9996 26.69276... |\n|Qidong        | 18001|  20307.00|             20018.75|        142149|      160150|POLYGON ((111.7818 27.0383,... |\n|Chenxi        | 17026|  20023.80|             19524.17|        100119|      117145|POLYGON ((110.2624 28.21778... |\n|Zhongfang     | 30846|  16576.80|             18955.00|         82884|      113730|POLYGON ((109.9431 27.72858... |\n|Huitong       | 14334|  18667.00|             17800.40|         74668|       89002|POLYGON ((109.9419 27.10512... |\n|Jingzhou      | 20348|  14394.67|             15883.00|         43184|       63532|POLYGON ((109.8186 26.75842... |\n|Mayang        | 13744|  19848.80|             18831.33|         99244|      112988|POLYGON ((109.795 27.98008,... |\n|Tongdao       | 12781|  15516.33|             14832.50|         46549|       59330|POLYGON ((109.9294 26.46561... |\n|Xinhuang      | 15412|  20518.00|             17965.00|         20518|       35930|POLYGON ((109.227 27.43733,... |\n|Xupu          | 13863|  17572.00|             17159.89|        140576|      154439|POLYGON ((110.7189 28.30485... |\n|Yuanling      | 24194|  15200.12|             16199.44|        121601|      145795|POLYGON ((110.9652 28.99895... |\n|Zhijiang      | 20518|  18413.80|             18764.50|         92069|      112587|POLYGON ((109.8818 27.60661... |\n|Lengshuijiang | 64257|  14419.33|             26878.75|         43258|      107515|POLYGON ((111.5307 27.81472... |\n|Shuangfeng    | 17755|  24094.50|             23188.86|        144567|      162322|POLYGON ((112.263 27.70421,... |\n|Xinhua        | 13398|  22019.83|             20788.14|        132119|      145517|POLYGON ((111.3345 28.19642... |\n|Chengbu       | 10132|  12923.50|             12365.20|         51694|       61826|POLYGON ((110.4455 26.69317... |\n|Dongan        | 20901|  14756.00|             15985.00|         59024|       79925|POLYGON ((111.4531 26.86812... |\n|Dongkou       | 13240|  13869.80|             13764.83|         69349|       82589|POLYGON ((110.6622 27.37305... |\n|Longhui       |  9572|  12296.67|             11907.43|         73780|       83352|POLYGON ((110.985 27.65983,... |\n|Shaodong      | 25246|  15775.17|             17128.14|         94651|      119897|POLYGON ((111.9054 27.40254... |\n|Suining       | 16069|  14382.86|             14593.62|        100680|      116749|POLYGON ((110.389 27.10006,... |\n|Wugang        | 12112|  11566.33|             11644.29|         69398|       81510|POLYGON ((110.9878 27.03345... |\n|Xinning       | 10732|  13199.50|             12706.00|         52798|       63530|POLYGON ((111.0736 26.84627... |\n|Xinshao       | 11514|  23412.00|             21712.29|        140472|      151986|POLYGON ((111.6013 27.58275... |\n|Shaoshan      | 55570|  39541.00|             43548.25|        118623|      174193|POLYGON ((112.5391 27.97742... |\n|Xiangxiang    | 29361|  36186.60|             35049.00|        180933|      210294|POLYGON ((112.4549 28.05783... |\n|Baojing       | 14563|  16559.60|             16226.83|         82798|       97361|POLYGON ((109.7015 28.82844... |\n|Fenghuang     | 13382|  20772.50|             19294.40|         83090|       96472|POLYGON ((109.5239 28.19206... |\n|Guzhang       | 11580|  19471.20|             18156.00|         97356|      108936|POLYGON ((109.8968 28.74034... |\n|Huayuan       | 20337|  19827.33|             19954.75|         59482|       79819|POLYGON ((109.5647 28.61712... |\n|Jishou        | 31537|  15466.80|             18145.17|         77334|      108871|POLYGON ((109.8375 28.4696,... |\n|Longshan      |  9754|  12925.67|             12132.75|         38777|       48531|POLYGON ((109.6337 29.62521... |\n|Luxi          | 17472|  18577.17|             18419.29|        111463|      128935|POLYGON ((110.1067 28.41835... |\n|Yongshun      |  9590|  14943.00|             14050.83|         74715|       84305|POLYGON ((110.0003 29.29499... |\n|Anhua         | 14567|  24913.00|             23619.75|        174391|      188958|POLYGON ((111.6034 28.63716... |\n|Nan           | 21311|  25093.00|             24552.71|        150558|      171869|POLYGON ((112.3232 29.46074... |\n|Yuanjiang     | 26258|  24428.80|             24733.67|        122144|      148402|POLYGON ((112.4391 29.1791,... |\n|Jianghua      | 15801|  17003.00|             16762.60|         68012|       83813|POLYGON ((111.6461 25.29661... |\n|Lanshan       | 20088|  21143.75|             20932.60|         84575|      104663|POLYGON ((112.2286 25.61123... |\n|Ningyuan      | 12697|  20435.00|             19467.75|        143045|      155742|POLYGON ((112.0715 26.09892... |\n|Shuangpai     | 21942|  17131.33|             18334.00|         51394|       73336|POLYGON ((111.8864 26.11957... |\n|Xintian       | 14426|  24569.75|             22541.00|         98279|      112705|POLYGON ((112.2578 26.0796,... |\n|Huarong       | 30413|  23835.50|             26028.00|         47671|       78084|POLYGON ((112.9242 29.69134... |\n|Linxiang      | 31897|  26360.00|             29128.50|         26360|       58257|POLYGON ((113.5502 29.67418... |\n|Miluo         | 42497|  47383.40|             46569.00|        236917|      279414|POLYGON ((112.9902 29.02139... |\n|Pingjiang     | 17252|  55157.75|             47576.60|        220631|      237883|POLYGON ((113.8436 29.06152... |\n|Xiangyin      | 33983|  37058.00|             36545.50|        185290|      219273|POLYGON ((112.9173 28.98264... |\n|Cili          | 18714|  21546.67|             20838.50|         64640|       83354|POLYGON ((110.8822 29.69017... |\n|Chaling       | 20078|  23348.67|             22531.00|         70046|       90124|POLYGON ((113.7666 27.10573... |\n|Liling        | 41491|  42323.67|             42115.50|        126971|      168462|POLYGON ((113.5673 27.94346... |\n|Yanling       | 21021|  28938.60|             27619.00|        144693|      165714|POLYGON ((113.9292 26.6154,... |\n|You           | 36264|  25880.80|             27611.33|        129404|      165668|POLYGON ((113.5879 27.41324... |\n|Zhuzhou       | 27589|  47345.67|             44523.29|        284074|      311663|POLYGON ((113.2493 28.02411... |\n|Sangzhi       | 14624|  18711.33|             18127.43|        112268|      126892|POLYGON ((110.556 29.40543,... |\n|Yueyang       | 26360|  29087.29|             28746.38|        203611|      229971|POLYGON ((113.343 29.61064,... |\n|Qiyang        | 20638|  20748.29|             20734.50|        145238|      165876|POLYGON ((111.5563 26.81318... |\n|Taojiang      | 19509|  35933.71|             33880.62|        251536|      271045|POLYGON ((112.0508 28.67265... |\n|Shaoyang      |  9653|  15439.71|             14716.38|        108078|      117731|POLYGON ((111.5013 27.30207... |\n|Lianyuan      | 18346|  29787.50|             28516.22|        238300|      256646|POLYGON ((111.6789 28.02946... |\n|Hongjiang     | 17733|  18145.00|             18086.14|        108870|      126603|POLYGON ((110.1441 27.47513... |\n|Hengyang      | 19382|  21617.00|             21244.50|        108085|      127467|POLYGON ((112.7144 26.98613... |\n|Guiyang       | 32853|  29203.89|             29568.80|        262835|      295688|POLYGON ((113.0811 26.04963... |\n|Changsha      | 88656|  41363.67|             48119.71|        248182|      336838|POLYGON ((112.9421 28.03722... |\n|Taoyuan       | 22879|  22259.09|             22310.75|        244850|      267729|POLYGON ((112.0612 29.32855... |\n|Xiangtan      | 27060|  44939.56|             43151.60|        404456|      431516|POLYGON ((113.0426 27.8942,... |\n|Dao           | 18059|  16902.00|             17133.40|         67608|       85667|POLYGON ((111.498 25.81679,... |\n|Jiangyong     | 17168|  16930.00|             17009.33|         33860|       51028|POLYGON ((111.3659 25.39472... |\n:::\n:::\n\n\n-   Side-by-side comparison plot with `lag_sum GDPPC`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\",\n                     fill.style=\"fixed\", fill.breaks=c(0,100000, 200000, 300000, 400000, 500000),\n                     legend.text.size = 0.5,legend.title.size = 0.5\n                     ) +\n  tm_layout(main.title = \"lag_sum GDPPC\", main.title.position = \"right\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\",\n                   fill.style=\"fixed\", fill.breaks=c(0,100000, 200000, 300000, 400000, 500000),\n                  legend.text.size = 0.5,legend.title.size = 0.5\n                   ) +\n  tm_layout(main.title = \"w_sum GDPPC\", main.title.position = \"right\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n# 2. Global Measures of Spatial Autocorrelation {#global-measures-of-spatial-autocorrelation}\n\n-   Visualizing difference between `equal interval` and `equal quantile` plots\n-   Use of `Moran's I` test to test global spatial autocorrelation\n    -   Important to note, we are calculating **Global** Moran's I, vs Local Moran's I, later\n    -   Use of `Monte Carlo Moran's I` simulations\n-   Use of `Geary's C` test to test global spatial autocorrelation\n    -   Use of `Monte Carlo Geary's C` simulations\n-   Drawing Spatial Correlogram for both `Moran's I` and `Geary's C`\n\n## 2.1 Analytical Question\n\n-   Identify if development is equally distributed geographically in Hunan province\n-   If **NO**, then ask: Is there signs of spatial clustering?\n-   If **YES**, then ask: Where is the spatial clustering?\n\n## 2.2 Import Datasets\n\n## 2.3 Import Packages\n\n-   Actually, the same datasets are used from above; see [Section 1.2](#import-hunan-shapefile-datasets)\n    -   `/data/geospatial/Hunan.###`: This is a geospatial data set in ESRI shapefile format.\n    -   `/data/geospatial/Hunan.###`: This is a geospatial data set in ESRI shapefile format.\n-   Similarly, the same packages are used, see [Section 1.3](#import-packages-files)\n    -   `sf`, `spdep`, `tmap`, `tidyverse`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import can be ignored, loaded from before\n# pacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n# We run here to reload hunan dataframe, remove spatial lag columns added in earlier\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Hunan' from data source \n  `C:\\1darren\\ISSS624\\Hands-on_Ex02\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(County)`\n```\n:::\n\n```{.r .cell-code}\nkable(head(hunan, 5))\n```\n\n::: {.cell-output-display}\n|NAME_2  |  ID_3|NAME_3  |ENGTYPE_3   |County  | GDPPC|geometry                       |\n|:-------|-----:|:-------|:-----------|:-------|-----:|:------------------------------|\n|Changde | 21098|Anxiang |County      |Anxiang | 23667|POLYGON ((112.0625 29.75523... |\n|Changde | 21100|Hanshou |County      |Hanshou | 20981|POLYGON ((112.2288 29.11684... |\n|Changde | 21101|Jinshi  |County City |Jinshi  | 34592|POLYGON ((111.8927 29.6013,... |\n|Changde | 21102|Li      |County      |Li      | 24473|POLYGON ((111.3731 29.94649... |\n|Changde | 21103|Linli   |County      |Linli   | 25554|POLYGON ((111.6324 29.76288... |\n:::\n:::\n\n\n-   Now we create a basemap and chloropleth to look at `GDPPC` values for 2023\n-   Note the difference in scales!\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\", main.title.position = \"right\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\", main.title.position = \"right\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n## 2.4 Calculating Global Spatial Autocorrelation\n\n1.  Create QUEEN contiguity weight matrix as in [Section 1.5](#contiguity-spatial-weights), *Contiguity Spatial Weights*\n2.  Create row-standardised weight matrix as in[Section 1.7.1](#creating-row-standardised-weight-matrix), *Creating row-standardised weight matrix*\n    -   use of `style=\"W\"` for equal weights here for example, but `Style=\"B\"` more robust\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\n# summary(wm_q)\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n```\n:::\n:::\n\n\n## 2.4 \"M\": Moran's I test\n\n-   `Moran's I` evaluates spatial autocorrelation and returns whether pattern is clustered, dispersed, or random (i.e. no autocorrelation)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMoran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n```\n:::\n:::\n\n\n::: callout-note\n## **Quiz**: What statistical conclusion can you draw from the output above?\n\n-   **Moran's I Statistic:** of \\~0.3 indicates weak spatial correlation\n    -   (+) means similar values are closer (e.g. high with high); (-) means dissimilar values cluster (e.g. high with low)\n    -   Closer to 0 means random, closer to 1 or -1 indicates strong correlation\n    -   Expected value is -1/(N-1), i.e. -1/87 here, which is close enough to 0 for estimation\n-   **alternative: greater:** Suggests that the alternative hypothesis is true, that GDPPC value has is spatially correlated (e.g. neighbouring regions affect value)\n    -   null hypothesis is that the GDPPC is randomly distributed in space\n-   **p-Value:** of magnitude 1e-06 suggests confidence/statistical significance of result\n    -   p value \\< 0.05 suggests result is not due to random chance\n:::\n\n### 2.4.1 \"M\": Monte Carlo Moran's I test\n\n-   Not sure where the is necessary, but [R documentation](https://www.rdocumentation.org/packages/spdep/versions/1.2-8/topics/moran.test) suggests also using the Monte Carlo version\n-   `Moran's I` evaluates spatial autocorrelation and returns whether pattern is clustered, dispersed, or random (i.e. no autocorrelation)\n    -   even using a different seed from Prof, values are similar\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nset.seed(42)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n```\n:::\n:::\n\n\n::: callout-note\n## **Quiz**: What statistical conclusion can you draw from the output above?\n\n-   **Moran's I Statistic:** of 0.30075 indicates weak spatial correlation, as before;\n    -   **alternative: greater:** Suggests that the alternative hypothesis is true, that GDPPC value has is spatially correlated (e.g. neighbouring regions affect value)\n    -   **p-Value:** of 0.001 suggests confidence/statistical significance of result; 0.001 probability of observing results like that\n    -   **observed rank** according to documentations suggests the observed statistic is ranked 1000th of 1000 simulations, but I am not sure of what this means.\n:::\n\n## 2.4.4.2 Visualising Monte Carlo Moran's I test\n\n-   Extracting key statistics from `$res` column\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"Printing values from simulation:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrinting values from simulation:\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\n>> mean\\t: \", mean(bperm$res[1:999]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n>> mean\t:  -0.007182342\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\n>> var\\t: \", var(bperm$res[1:999]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n>> var\t:  0.004295062\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\n>> summary:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n>> summary:\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nsummary(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-0.200131 -0.052501 -0.013190 -0.007182  0.034529  0.228826 \n```\n:::\n:::\n\n\n-   plotting `res` column in histogram:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\",\n     main=\"Histogram of Moran's I statistics, 1000 simulations\")\nabline(v=0, \n       col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## **Quiz**: What statistical observation can you draw from the output above?\n\n-   Monte Carlo results in normal distribution; most values are close to zero or slightly negative -- close to expected value\n    -   most values within 0.2; relatively weak spatial correlation\n-   **observed rank** The Moran's I statistic of 0.30075 is ranked 1000/1000 simulations, and the highest statistic obtained\n:::\n\n::: callout-note\n## **Challenge**: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package.\n\n-   Doesn't generate the exact same histogram, but close enough\n-   Not sure why `breaks = 20` for `geom_histogram` doesn't work right, have to manually compute `data_binwidth` instead\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nlibrary(ggplot2)\n\n# Create a sample dataset\nset.seed(123)\ndata <- as.data.frame(bperm$res)\ndata_binwidth <- (max(bperm$res) - min(bperm$res)) / 20\n\nggplot(data, aes(x = bperm$res)) +\n  geom_histogram(binwidth = data_binwidth, fill = \"grey\", color = \"black\", alpha = 0.7) +\n  labs(title = \"ggplot2 Histogram Counter-Example\", x = \"Simulated Moran's I\", y = \"Frequency\") + \n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\", size = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n## 2.4.5 Geary's C Statistics\n\n-   `Geary's C` evaluates spatial autocorrelation at global level;\n    -   Geary's C is inversely related to Moran's I;\n    -   Geary's C uses sum of squared distances, less sensitive to linear associations\n    -   Moran's I uses standardized spatial covariance\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ngeary.test(hunan$GDPPC, listw=rswm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tGeary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n```\n:::\n:::\n\n\n::: callout-note\n## **Quiz**: What statistical conclusion can you draw from the output above?\n\n-   **Geary's C Statistic:** of 0.69 suggests spatial correlation, i.e. GDPPC is related to neighbours\n    -   Geary's c \\< 1 [indicates positive spatial autocorrelation](https://www.nku.edu/~longa/geomed/ppa/doc/globals/Globals.htm#:~:text=A%20value%20of%20Geary's%20c,points%20to%20negative%20spatial%20autocorrelation.), while \\>1 suggests spatial dispersion (negative auto-correlation)\n    -   **alternative hypothesis: Expectation greater than statistic:** Suggests that the alternative hypothesis is true, that GDPPC value has is positively spatially correlated (e.g. neighbouring regions affect value)\n    -   **p-Value:** of 0.0001526 suggests confidence/statistical significance of result; very very low probability that result obtained is due to pure chance\n:::\n\n-   corresponding Monte Carlo permutation test for Geary's C; even with a different seed, the values are similar\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nset.seed(42)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 2, p-value = 0.002\nalternative hypothesis: greater\n```\n:::\n:::\n\n\n::: callout-note\n## **Quiz**: What statistical conclusion can you draw from the output above?\n\n-   **observed rank** The Geary's C statistic of 0.69072 is ranked 2/1000 simulations, and the second-lowest; i.e. most values are higher.\n-   **p-value** of 0.002 is still very small, results unlikely to be due to randomness; **alternative hypothesis: greater** suggests there exists positive auto-correlation\n:::\n\n## 2.4.5.3 Visualising Monte Carlo Geary's C test\n\n-   Extracting key statistics from `$res` column\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"Printing values from Geary's C simulation:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrinting values from Geary's C simulation:\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\n>> mean\\t: \", mean(bperm$res[1:999]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n>> mean\t:  0.9953715\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\n>> var\\t: \", var(bperm$res[1:999]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n>> var\t:  0.00723939\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\ncat(\"\\n>> summary:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n>> summary:\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nsummary(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.6827  0.9404  0.9960  0.9954  1.0535  1.2888 \n```\n:::\n:::\n\n\n-   plotting `res` column in histogram:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Geary's c\",\n     main=\"Histogram of Geary's c statistics, 1000 simulations\")\nabline(v=1, \n       col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## **Quiz**: What statistical conclusion can you draw from the output above?\n\n-   **observed rank** The Geary's C statistic of 0.69072 is ranked 2/1000 simulations, and the second-lowest; i.e. most values are higher.\n    -   as before, Monte Carlo simulations seem to generate normal distribution\n    -   positive spatial correlation exists but not strong; mostly near expected value 1.0\n:::\n\n## 2.5 Spatial Correlogram\n\n### 2.5.1 Moran's I Correlogram\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nprint(MI_corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nplot(MI_corr)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## **Quiz**: What statistical conclusion can you draw from the plot/output above?\n\n-   **Correlogram** At smaller lags (i.e. smaller distance away) there is positive spatial auto-correlation, fading away to randomness/no autocorrelation at intermediate lags, and negative at higher (5-6) lags\n-   Observing **printout**, lags at 3 and 4 are not strongly statistically significant, best results at lags 1, 2, 5.\n:::\n\n### 2.5.2 Geary's C Correlogram\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nprint(GC_corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show code\"}\nplot(GC_corr)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## **Quiz**: What statistical conclusion can you draw from the plot/output above?\n\n-   **Correlogram** At smaller lags (i.e. smaller distance away) there is positive spatial auto-correlation, fading away to randomness/no autocorrelation at intermediate lags, and negative at higher (5-6) lags\n-   Observing **printout**, lags at 3, 4, 6 are not strongly statistically significant, best results at lags 1, 2, 5.\n    -   Probably because few regions are 6-regions away; results probably most accurate for 1- or 2-regions away\n:::\n\n# 3. Local Measures of Spatial Autocorrelation {#local-measures-of-spatial-autocorrelation}\n\nMoved to new page: [Hands-on_Ex02_local](Hands-on_Ex02_Local)\n",
    "supporting": [
      "Hands-on_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}