---
title: "Hands-on Exercise 2: Spatial Weights & Spatial Autocorrelation"
editor: visual
---

On this page, I address Hands-On Exercise for Chapter 02:

-   [**Spatial Weights and Applications**](#import-hunan-shapefile-datasets)
-   [**Global Measures of Spatial Autocorrelation**](#global-measures-of-spatial-autocorrelation)
-   [**Local Measures of Spatial Autocorrelation**](#local-measures-of-spatial-autocorrelation)

# 3. Local Measures of Spatial Autocorrelation {#local-measures-of-spatial-autocorrelation}

-   Calculating `Local Moran's I` for each region
-   Creating LISA Clustermap
-   Creating Hotspot & Coldspot
-   Calculating Getis and Ord's Gi\* values using fixed and adaptive distances

## 3.1 Analytical Question

-   Identify if development is equally distributed geographically in Hunan province
-   If **NO**, then ask: Is there signs of spatial clustering?
-   If **YES**, then ask: Where is the spatial clustering?

## 3.2 Import Datasets

## 3.3 Import Packages

-   Similar datasets are used in Hands-on Ex02:
    -   `/data/geospatial/Hunan.###`: This is a geospatial data set in ESRI shapefile format.
    -   `/data/geospatial/Hunan.###`: This is a geospatial data set in ESRI shapefile format.
-   Similarly, the same packages are used, see [Section 1.3](#import-packages-files)
    -   `sf`, `spdep`, `tmap`, `tidyverse`

```{r}
#| code-fold: true
#| code-summary: "show code"
print("Importing packages...")
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)


hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
kable(head(hunan, 5))

wm_q <- poly2nb(hunan, 
                queen=TRUE)
# summary(wm_q)
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

## 3.6 Cluster & Outlier Analysis

-   use of `LISA` (Local Indicators of Spatial Association) to detect clusters/outliers from Hunan GDPPC

### 3.6.1 Local Moran's I

-   (Global) Moran's I is performed over the entire dataset, looking for pattern across all the datapoints considered
    -   Local Moran's I checks each individual datapoint for spatial correlation to detect individual clusters
-   `localmoran()` thus identifies a Local Moran's I score for each of 88 regions

```{r}
#| code-fold: true
#| code-summary: "show code"
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
print("Printing first 6 rows of `localMI`\n")
head(localMI)
```

-   Print coefficient matrix of localMoran (warning: long!)

::: {.callout-caution collapse="true"}
## Warning: LONG! Using `str()` to print LocalMoran output Table

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=hunan$County[fips]),
  check.names=FALSE)
```
:::

### 3.6.1.1 Mapping Local Moran's I

-   first we append the output coefficient matrix from `localMI` to hunan before mapping

```{r}
#| code-fold: true
#| code-summary: "show code"
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)

max_row <- hunan.localMI[which.max(hunan.localMI$Ii), ]
print(paste0("The region of deepest blue is: ", max_row$County))


local_moran_stats <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "Local Moran Statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran Statistics")

local_moran_p <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Greens", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran's I p-values")

tmap_arrange(local_moran_stats, 
             local_moran_p, 
             asp=1, 
             ncol=2)
```

-   Overall, looks like generally weakly positive spatial autocorrelation
-   Region of darkest blue (i.e. most influenced by neighbours) is Changsha, 4.9022 (or Wangcheng, 4.4220)
    -   confidently so, as p-values of regions are extremely low

## 3.7 LISA Cluster Maps

-   plot significant locations of spatial autocorrelation

### 3.7.1 Moran scatterplot

-   scatterplot of spatially lag GDPPC (y-axis) against region's GDPPC (x-axis)
-   top-right quadrant show regions of high GDPPC and high GDPPC-neighbours

```{r}
#| code-fold: true
#| code-summary: "show code"
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")                    


```

### 3.7.2 Rescaling scatterplot to centre

-   R-code is really quite powerful for statistics
-   use of `scale` for standardisation of values to "centre" the plot

```{r}
#| code-fold: true
#| code-summary: "show code"
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector                  
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")

```

### 3.7.3 Preparing LISA Cluster Map:

-   creates a vector called `quadrant` of length same as `localMI` (i.e. 88 regions)
-   creates spatially lagged GDPPC and centre by removing mean
-   also centre local moran's I value around its mean
-   set statistical threshold of `0.05`
-   partition 4 quadrants from low-low to high-high
    -   "5th quadrant" of non-statistically significant regions

```{r}
#| code-fold: true
#| code-summary: "show code"
quadrant <- vector(mode="numeric",length=nrow(localMI))
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
LM_I <- localMI[,1]   
signif <- 0.05       

quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4    
quadrant[localMI[,5]>signif] <- 0
```

## 3.7.3 Now we plot the map LISA Cluster Map:

```{r}
#| code-fold: true
#| code-summary: "show code"
gdppc <- qtm(hunan, "GDPPC")+
  tm_layout(main.title = "Map of GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)  +
  tm_layout(main.title = "LISA map by Quadrant")

tmap_arrange(gdppc, LISAmap, local_moran_stats, 
             local_moran_p, 
             asp=2, ncol=2)
```

## 3.8 HotSpot & ColdSPot Area Analysis

-   `Hot Spot` refers to region with value higher than surrounding; similarly `Cold Spot` for lower

### 3.8.1 Getis and Ord's Gi\*-Statistics

-   ultimate output `wm62_lw` is a weight matrix, using 62km as neighbour threshold, as a list of spatial weights
    -   to find centroid, use Section 1.5.1
    -   to find cut-off distance, use Section 1.6.1
    -   to computed fixed-distance weight, use Section 1.6.2

```{r}
#| code-fold: true
#| code-summary: "show code"
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)

k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)

wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)

```

### 3.8.3 Computing adaptive distance weight matrix

-   use `knn` with neighbours=8 (max) to enforce "smoothing of neighbour relationship"
    -   note below, all 88 regions are "least connected" and "most connected"
-   use `nb2listw` to convert `nb` object to list of spatial weights
    -   note binary style i.e.

```{r}
#| code-fold: true
#| code-summary: "show code"

knn <- knn2nb(knearneigh(coords, k=8))
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)

```

## 3.9 Computing Gi\* statistics

### 3.9.1 Computing Gi\* statistics with Fixed Distance

-   Using `wm62_lw` from above, creating fixed distance to calculate Z-score for Getis-Ord's Gi\*-statistics
    -   Z-score, higher value == greater intensity of clustering
    -   (+) high clusters, (-) low clusters
-   cbind back to create `hunan.gi` SpatialPolygonDataFrame

```{r}
#| code-fold: true
#| code-summary: "show code"
                       
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)

max_row <- hunan.gi[which.max(hunan.gi$gstat_fixed), ]
print(paste0("The region of deepest blue is: ", max_row$County))

head(hunan.gi, 5)

```

-   draw map:

    -   from above, darkest red Local Gi region is Wangcheng

    ```{r}
    #| code-fold: true
    #| code-summary: "show code"
                           
    gdppc <- qtm(hunan, "GDPPC")  +
      tm_layout(main.title = "GDPPC", main.title.position ="right")

    Gimap <-tm_shape(hunan.gi) +
      tm_fill(col = "gstat_fixed", 
              style = "pretty",
              palette="-RdBu",
              title = "local Gi*") +
      tm_borders(alpha = 0.5)  +
      tm_layout(main.title = "Local Gi*, fixed dist", main.title.position ="right")

    tmap_arrange(gdppc, Gimap, asp=1, ncol=2)

    ```

    ::: callout-note \## **Quiz**: What statistical conclusion can you draw from the output above?

-   `Wangcheng` shows slightly higher Gi\* value than `Changsha`, though both were identified earlier

-   similar colour palette as quadrant mapping earlier; red regions are high-high, blue regions are low-low

    -   overall, looks like there is some agreement of spatial auto-correlation when analysed like this

:::

### 3.9.2 Computing Gi statistics using Adaptive Distance

-   Using `knn_lw` from above with 8 fixed neighours for each region

    -   I guess "adaptive distance" means "whatever distance needed to clock as neighbours"

    ```{r}
    #| code-fold: true
    #| code-summary: "show code"
                           
    fips <- order(hunan$County)
    gi.adaptive <- localG(hunan$GDPPC, knn_lw)
    hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
      rename(gstat_adaptive = as.matrix.gi.adaptive.)

    gdppc<- qtm(hunan, "GDPPC")  +
      tm_layout(main.title = "GDPPC", main.title.position ="right")
    coolwarm <- colorRampPalette(c("blue", "white", "red"))(10)


    Gimap_adaptive <- tm_shape(hunan.gi) + 
      tm_fill(col = "gstat_adaptive", 
              style = "pretty", 
              palette=coolwarm, 
              title = "local Gi* adaptive") + 
      tm_borders(alpha = 0.5)  +
      tm_layout(main.title = "Local Gi* adaptive dist", main.title.position ="right")

    tmap_arrange(gdppc, 
                 Gimap,
                 Gimap_adaptive,
                 asp=1, 
                 ncol=3)

    ```

::: callout-note
## **Quiz**: What statistical conclusion can you draw from the output above?

-   Using both fixed- and adaptive-distance neigbours generates similar results; values are largely in agreement
-   knn=8 feels like it's not very logical, but maybe there's not too much difference
:::
