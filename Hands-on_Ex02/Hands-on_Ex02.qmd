---
title: "Hands-on Exercise 2: Spatial Weights & Spatial Autocorrelation"
editor: visual
---

On this page, I address Hands-On Exercise for Chapter 02 - **Spatial Weights and Applications**

# 1. Spatial Weights & Applications

## 1.2 Import `Hunan` Shapefile datasets

### 1.1.1 Geospatial Data Sets

-   `/data/geospatial/Hunan.###`: This is a geospatial data set in ESRI shapefile format.

### 1.2.2 Aspatial Data Sets

-   `/data/aspatial/Hunan_2012.csv`: This csv file contains selected Hunan's local development indicators in 2012.

## 1.3 Import packages & files

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

-   Left join to select only specific columns

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

## 1.4 Visualisation with qtm next to basemap

```{r}
#| code-fold: true
#| code-summary: "show code"
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

### 1.5 Contiguity Spatial Weights

-   There are 2 types of contiguity, based on chess pieces
    -   `QUEEN` two regions are contiguous if they share a vertex;
    -   `ROOK` two regions are contiguous if they share an edge;
-   Literature suggests they are mostly similar, but `QUEEN` is more robust at capturing neighbouring/contiguity more consistently

#### 1.5.1 `QUEEN` Contiguity Neighbours

```{r}
#| code-fold: true
#| code-summary: "show code"
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

Identifying all neighbours of most connected region:

```{r}
#| code-fold: true
#| code-summary: "show code"
wm_q[[85]]
```

-   Name of region

```{r}
#| code-fold: true
#| code-summary: "show code"
cat("Most connected region:", hunan$County[85], "\n\n>> ID\t|  Name \t| GDPPC  \t|  Neighbours:")

for (value in wm_q[[85]]){
  cat("\n>> ", value, "\t|", hunan$County[value], "  \t|", hunan$GDPPC[value], "  \t|", wm_q[[value]])
  }
```

-   Print adjacency matrix (warning: long!)

::: {.callout-caution collapse="true"}
## Using `str()` to print adjacency weight matrix

```{r}
str(wm_q)
```
:::




#### 1.5.2 `ROOK` Contiguity Neighbours

```{r}
#| code-fold: true
#| code-summary: "show code"
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```
- Who's not there?

```{r}
setdiff(wm_q[[85]], wm_r[[85]])
```


### 1.5.3 Exploring Contiguity Weights

-   For `kml` file, we need to specify specific path + filename + extension, unlike other

