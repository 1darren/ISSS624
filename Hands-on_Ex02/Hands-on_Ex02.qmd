---
title: "Hands-on Exercise 2: Spatial Weights & Spatial Autocorrelation"
editor: visual
---

On this page, I address Hands-On Exercise for Chapter 02 - **Spatial Weights and Applications**

# 1. Spatial Weights & Applications

## 1.2 Import `Hunan` Shapefile datasets

### 1.1.1 Geospatial Data Sets

-   `/data/geospatial/Hunan.###`: This is a geospatial data set in ESRI shapefile format.

### 1.2.2 Aspatial Data Sets

-   `/data/aspatial/Hunan_2012.csv`: This csv file contains selected Hunan's local development indicators in 2012.

## 1.3 Import packages & files

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```
- Left join to select only specific columns
```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

## 1.4 Visualisation with qtm next to basemap


```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

### 1.4.2 Importing polygon feature data in shapefile form -- Cyclingpath

```{r}
cyclingpath <- st_read(dsn = "data/geospatial", layer = "CyclingPathGazette")
```

### 1.4.3 Importing GIS data in kml format

-   For `kml` file, we need to specify specific path + filename + extension, unlike other

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

## 1.5 st_geometry(); glimpse(); head() {#st_geometry-glimpse-head}

-   Geometries are stored in an `sf` dataframe; the column that contains them is an `sfc` class. We can preview the top few geometries:

```{r}
st_geometry(mpsz)
```

-   `glimpse` is the preview function to peek at top few rows/features

```{r}
glimpse(mpsz)
```

-   View top `n` rows of dataframe, similar to pandas `head()`

```{r}
head(mpsz, n=5)
```

## 1.6 plot()

::: panel-tabset
## `plot()`

-   `plots` geospatial features of MPSZ, forcing all 15 instead of first 9

```{r}
plot(mpsz, max.plot=15)
```

## `plot(st_geometry())`

-   only plots `sfc` object; see [Section](#st_geometry-glimpse-head)

```{r}
plot(st_geometry(mpsz))
```

## `plot()` specific attribute

```{r}
plot(mpsz["PLN_AREA_N"])
```
:::

## 1.7 Projection Transformation

### 1.7.1 Changing EPSG Code

-   Check the end; `EPSG` should be `3414`, not `9001`

```{r}
st_crs(mpsz)
```

-   We use `st_set_crs` to convert the EPSG code

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
st_crs(mpsz3414)
```

### 1.7.2 Repojecting using different coordinate system

-   note `crs` is `3414` and `PROJCRS` is now `"SVY21"`

```{r}
preschool3414 <- st_transform(preschool, crs=3414)

st_crs(preschool3414)
```

## 1.8 Importing Aspatial as tibble, then convert to simple feature data frame

### 1.8.1 Import `csv` into `tibble` dataframe

```{r}
listings <- read_csv("data/aspatial/listings.csv")
list(listings)
```

```{r}
glimpse(listings)
```

### 1.8.2 Aspatial tibble -\> feature dataframe

```{r}
listings_sf <- st_as_sf(listings, coords = c("longitude", "latitude"), crs=4326) %>%
st_transform(crs = 3414)
glimpse(listings_sf)
```

## 1.9 `sf` Geoprocessing with sf

### 1.9.1 Computing buffer area with `st_buffer`

```{r}

buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)

buffer_cycling$AREA <- st_area(buffer_cycling)
sum(buffer_cycling$AREA)
```

### 1.9.2 Counting area intersects `st_intersects`

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
```

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

-   Calculating area using `st_area`, then
-   using `mutate` to add new column

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## 1.10 EDA for Geospatial ggplot

-   Plot histogram:

```{r}
hist(mpsz3414$`PreSch Density`)
```

-   `ggplot` Histogram with details

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

-   `ggplot` Scatterplot with details

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")

```

# 2. Chloropleth Mapping with R

## 2.1 Outcomes

-   Use of tmap to plot chloropleth maps

## 2.2 Imports

-   All are inside tidyverse
    -   `readr` for delimited text file
    -   `tidyr` for data cleaning
    -   `dplyr` for data wrangling
    -   `sf` we know for simple features

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## 2.3 Importing Data

### 2.3.1 Data Types

-   `mpsz` already downloaded;
-   `respopagesextod2011to2020.csv` retrieved from [Department of Statistics](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data)

### 2.3.2 Importing Geospatial Data

-   if not run already in 1.4.1 before:

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
mpsz
```

### 2.3.2 Importing attribute data into R

-   now read csv

```{r}
popdata <- read_csv("data/aspatial/respopagesexfa2011to2020.csv")

```

### 2.3.4 Data preparation & wrangling

-   This function is too hugely nested

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)

popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)

popdata2020
```

-   Left join `mpsz` on `popdata2020` to create simple dataframe:

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## 2.4 Using `tmap`

### 2.4.1 Quick tmap using `qtm()`

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, fill = "DEPENDENCY")

```

### 2.4.2 Complex tmap using `tmap`

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

## 2.4.2.1 Drawing base map, adding polygon layer

```{r}
tm_shape(mpsz_pop2020) + tm_polygons()
```

## 2.4.2.2 Colouring polygons

```{r}
tm_shape(mpsz_pop2020) + tm_polygons("DEPENDENCY")
```

## 2.4.2.3 Drawing base map, adding polygon layer

-   `tm_polygons()` is really just `tm_borders()` + `tm_fill`

```{r}
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY")
```

```{r}
tm_shape(mpsz_pop2020) + tm_borders()
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

## 2.4.3 Data classification beyond `pretty`

::: panel-tabset
## Jenks, 5

-   Using `jenks` natural break optimization

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

## Equal, 5

-   Expecting uniform distribution, quantiles of same lengths -- note how most data congregates in first quantile

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

## Jenks, 20

-   Using `jenks` natural break optimization
-   20 classes for illustration

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

## kmeans, 5

-   Using `jenks` natural break optimization
-   20 classes for illustration

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

## Custom Breaks, 5

-   first, quick data anaylis:

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

-   decision to use 0.6, 0.7, 0.8, 0.9;

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```
:::

## 2.4.4 Colour schemes:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

## 2.4.5.1 Legend opptions

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

## 2.4.5.2 Map Styles

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

## 2.4.5.3 Compass, Scale Bar, Grid lines

```{r}
tmap_style("white")
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

## 2.4.6 Facet maps: stacked chloropleths

-   using `ncols`

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

-   defining different styles for colours

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

-   by `tm_facets()`

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

-   Tesselating using tmap_arrange()

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

## 2.4.7 Conditional Spatial Map

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
