---
title: "In-class Exercise 1: My First Date with Geospatial Data Analytics"
date: "18 November 2023"
date-modified: "last-modified"
format: html
execute:
  echo: true
  eval: true
  warning: false
editor: visual
---

## Getting Started - Import packages

This function calls pacman to load sf, tidyverse, tmap packages; - tmap : For thematic mapping - sf : for geospatial data handling - tidyverse : for non-spatial data handling

```{r}
pacman::p_load(tmap, sf, tidyverse)
```

::: {.callout-note collapse="true"}
### Additional Notes

-   In the 'old days', the library-import would have been written thus:

```         
library(tmap)
library(sf)
library(tidyverse)
```
:::

## Preparing the Flow Data

### Importing the Origin/Destination (O/D) Data

Firstly, we will import the *Passenger volume by Origin/Destination Bus Stops* dataset downloaded by LTA Datamall by using `read_csv()` of **readr** package.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
odbus <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
  
```

::: {.callout-note collapse="true"}
### LearneR notes

-   NB: Here, we use relative paths, which is helpful for Rstudio, HTML rendering etc
    -   This works because current file ("In-class_Ex1.qmd") is in the same subdirectory level as /data file
    -   In the "Olde Style", we would specify data directories
-   In "Environment" window, clicking white triangle beside ODBUS gives an .info() of the `odbus` dataframe; easier than using `str` (structure) command
    -   Can also open folder in R to review for quick inspection;
    -   Remember to close after use to avoid\
:::

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
  
```

::: {.callout-note collapse="true"}
### LearneR notes

-   Command changes two columns into `factor` datatype; categorical variable stored as integer
:::

```{r}
origtrip_7_9 <- odbus %>% 
  filter(DAY_TYPE == "WEEKDAY")  %>% 
  filter(TIME_PER_HOUR >= 7 & TIME_PER_HOUR <= 9)  %>% 
  group_by(ORIGIN_PT_CODE)  %>% 
  summarise(TRIPS = sum(TOTAL_TRIPS))
origtrip_7_9
```

::: {.callout-note collapse="true"}
### LearneR notes

-   `%>%` Pipe function; chains together several operations in sequence to allow for multi-filter

    -   Code filters from odbus to ...

    1.  Filter by `WEEKDAY`
    2.  `TIME_PER_HOUR` between 7 to 9 inclusive (eg 0700 to 0959)
    3.  Creates a table, grouped by `ORIGIN_PT_CODE`...
    4.  ...with a fourth summary column, `TRIPS`, created as a sum of `TOTAL_TRIPS`
:::

## Extracting the Study Data

```{r}
busstop <- st_read(dsn = "data/geospatial", 
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

-   `BUSSTOP$GEOMETRY`: Binary Large Object Field; defines coordinate for each bus-stop
    -   Typical cell of dataframe is either INT or CHAR
    -   BLOF allows to store a list; POINT(lat, long)
-   `MPSZ$GEOMETRY`is instead a multipolygon; a list of 300 x 2 coordinates
-   IMPORTANT: There are two different coordinates system;
    -   Most GML, KML, data.gov are in wgs84, decimal degree data format
    -   We should change to svy21
    -   CRS: coordinate system of Singapore; cahnge to metres
-   Now we can join odbus (bus stop code) and busstop (coordinates) and also master plan subzone (mpsz) \## Working with Geospatial Data

## Importing Geospatial Data

## Geospatial Data Wrangling

## Combining Bus Stop & MPSZ

## Visualizing the Geospatial Data

## Viewing the Subzone Spatial File

## Personal Notes

### ODBus Structure

-   7 columns;

-   time_per_hour: hour of travel

-   origin_pt_code, destination_pt_code: per bus-trip; change-bus counted as 2 trips

-   total_trips: number of passengers moving between startpoint/endpoint, during that hour

-   **Issue:** no explicit location, only bus stop code; can we reconcile bus-stop-code with geospatial data?

-   yes:
