---
title: "In-class Exercise 3: Spatial"
date: "02 Dec 2023"
date-modified: "last-modified"
format: html
execute:
  echo: true
  eval: true
  warning: false
editor: source
---

::: {.callout-note collapse="true"}
### Hidden: In-Class Lecture notes

## In-Class Lecture Notes

"In real world, there is no concept of equality." -- Prof Kam

```         

### Take-home Exercise notes:
- drop_NA() outside of region 
- do not save map as object class; will take very long
    - e.g. do not do map_name <- tmap_(...)
    - instead just call and render directly: tm_shape(...)    
- also consider change to tmap_mode("view") instead of `plot`

- exclude busstops in JB but retain causeway dataset 

- stick with tmap instead of mixing with mapview

### Learnings from Hands-on Ex03:

- Statistical method: cut away lowest 5% (cutoff < 5000 trips)
- Reveals a more focused map:
    - Westside, Jurong East/Clementi area: major transport nodes to adjacent mpsz subzone
    - Eastside, nexus around Tampines area extending to many related subzones
    - North-to-East: very long trips from N of island to E of island
    
    
- Understand: What are the factors affecting this flow?
    - Build explanatory models to understand factors that affect this flow 

### Concepts from Economic Geography / Retail Marketing: Trade Area Analysis

- Conditions for Spatial Flow 
    - Transferability: Willingness to travel for event (eg Concert)
    - Intervening Opportunity: Alternative travel options (eg Orchard vs JB)
    
- Travel costs: people willing to pay for transport (+lodgings) for 1-night concert

### In-Class Exercise 03

- Difficult if we consider bus-stop to bus-stop; too granular, single stop
    - That's why it's aggregated at subzone level;
    
- GENERAL FORMULATION:
    - [ Vi ] Available at origin; push factor
    - [ Wi ] Available at destination; pull factor
    - [ Sij ] Distance decay; distance of willingness to travel
    
- Vi, Wi can be one or multiple factors
- Interaction model Tij is thus a function of f(Vi, Wi, Sij)

- GRAVITY MODEL: Explain spatial interaction; i and j exert identical, opposite force on each other (as in gravity)
- POTENTIAL MODEL: Willingness to move for specific services eg 
- RETAIL MODEL: Delineate trade areas (fixed boundaries); eg people tend to shop within their regional boundaries instead of stepping out
    - since IRL the strict lines don't exist, we use probability 
    
- General formula can be easily formulated into a form for linear regression
    - Most of the time, relationship is nonlinear;
    - eg some goods, people are willing to pay over Beta: distance decay (eg concert) 
        - some goods are not worth travelling for (eg loaf of bread)
        - Beta looks like inverse relation (1/x)
    - Alpha & Lambda (propulsiveness/repulsiveness): similarly nonlinear, tend to be economic factors
        - looks like exponential, x^n 
- Use of generalised regression model in R

"The moral of the story is, not every relationship is linear."




 
```
:::

# 16. Calibrating Spatial Interaction Models with R

See Chapter 16: <https://r4gdsa.netlify.app/chap16>

-   When configuring, you need three types of data:

    -   `Flow data`: Prepared in Hands-on Ex03

    -   (Today): Calculate Tij formula by calculating Sij

## Overview

-   See also [In-Class Exercise 2: GLSA](In-class_Ex2_GLSA.html) and [In-Class Exercise 2: EHSA](In-class_Ex2_EHSA.html)

## 16.3 Getting Started - Import packages

-   `sp` Spatial Polygon package; computationally more efficient for large dataset

    -   Replaced by `sf` since 2015

-   `dt` for Dynamic tables

-   `performance` to calculate metrics to measure performance of model eg R\^2, MSE

-   `reshape2` handles matrices for distance matrix;

    -   Replaced by `tidyverse`, which focuses on handling dataframes but doesn't handle distance matrices so well

-   `ggpubr` for composing multiple plots into one

-   `tidyverse` loads a universe of packages, don't need to separately import `ggplot`, `tidyr`, `dplyr`

```{r}
pacman::p_load(tmap, sf, sp, DT,
               performance, reshape2,
               ggpubr, tidyverse)
```

## 16.5 Computing Distnace matrix 

-   we use administrative boundaries of subzone for easier parsing, instead of bus stop centroid

```{r}
#| code-fold: true
#| code-summary: "show code"
mpsz <- read_rds("data/rds/mpsz.rds")
mpsz
```

-   Note that distance matrix is symmetriccal about the diagonal;

    -   Diagonal is always zero, as row_1 == col_1, row_2 == col_2, etc

    -   We treat intra-subzone as zero

    -   By default, function will infill as zero

### Plot a chloropleth of GDPPC

template

```{r}
#| code-fold: true
#| code-summary: "show code"
#qtm(hunan, "GDPPC") +
#  tm_layout(main.title = "GDPPC", main.title.position = "right")


```

## Deriving QUEEN contiguity weights

-   `mutate` is function that creates new column from previous column datas
    -   `st_contiguity` creates `nb` neighbour matrix (QUEEN contiguity, by default)
    -   `st_weights` creates row-standardised weights (`style="W"`) from `nb` object
    -   One-step function using `sfdep`; a wrapper for `spdep` but writes output into `sf` dataframe

```{r}
#| code-fold: true
#| code-summary: "show code"

wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry), 
         wt = st_weights(nb, style = "W"),
         .before = 1)
```
