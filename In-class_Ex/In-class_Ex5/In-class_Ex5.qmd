---
title: "In-class Exercise 5: Spatial Econometrics"
date: "16 Dec 2023"
date-modified: "last-modified"
format: html
execute:
  echo: true
  eval: true
  warning: false
editor: source
---

::: {.callout-note collapse="true"}
### Hidden: In-Class Lecture notes

## In-Class Lecture Notes

"In real world, there is no concept of equality." -- Prof Kam

```         

### Take-home Exercise notes:
- Econometrics as "applied regression model";
  - A continuation of spatial weights + regression model 
  - Typically, 3-4 terms 
  
- Quantitative Analysis of economic phenomenon, based on development of theory & observation
  - Statistics applied to econometrics
- Spatial Econometrics: study of economic phenomena with spatial dependence; economic activity is related to location of factors of production.

- In-Class Exercise:
    - Data Preparation (skipped): focus on part 2, 
    - Model Calibration


 
```
:::

# 5. In-Class Ex 5

## 5.1 Import Packages

- First pre-load spflow from github directly:
```{r}
#| eval: false
devtools::install_github("LukeCe/spflow")
```

-   `httr` HTML features, communicate with webserver

-   `tidyverse` Data science work

-   `tmap` Visual plotting

-   `sf` Geospatial work

-   `spflow` Spatial Econometric Interaction Models / Sum Product
    - useful to perform SpaEcoIntMod without having to write low-level code


-   `Matrix` optimised package for running computations on large Matrix

```{r}
pacman::p_load(tidyverse, sf, httr, tmap, spflow, tmap,
               spdep, sp, Matrix, reshape2, knitr)
```

## 4.2 Loading data

-   Spflow requires:
  - Spatial weights
  - tibble df of OD Flows
  - tibble df of explanatory variables
      - by right, don't need to attach to origin or destination; 
      - within the 9 models, it will identify the variables as "Origin" or "Destination
        
        
- load mpsz, busstop data
  - use st_intersects to identify subzone with bus stops
  - filter out mpsz with 0 busstops
  
  
```{r}
#| eval: false
mpsz <- st_read(dsn = "data/geospatial", 
                 layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
# st_crs(mpsz)

busstop <- st_read(dsn = "data/geospatial", 
                 layer = "BusStop") %>%
  st_transform(crs = 3414)


mpsz$`BUSSTOP_COUNT` <- lengths(
  st_intersects(
    mpsz, busstop))

mpsz_busstop <- mpsz %>%
  filter(BUSSTOP_COUNT > 0)
mpsz_busstop
```

## create spatial weights

- "tricky way to make computation effective"
    - derive centroids in one stpe
    - create `mpsz_nb` with 3 different nb matrix techniques (contiguity, distance knn)
- prof Kam has already shifted one busstop to avoid 

```{r}
#| code-fold: true
#| code-summary: "show code"
#| eval: false
centroids <- suppressWarnings({
  st_point_on_surface(st_geometry(mpsz_busstop))
})
mpsz_nb <- list(
  "by_contiguity" = poly2nb(mpsz_busstop), 
  "by_distance" = dnearneigh(centroids, d1=0, d2=5000),
  "by_knn" = knn2nb(knearneigh(centroids, 3))
)
mpsz_nb

```
- note that `$by_contiguity` has no orphans;
- note that `$by_distance` has one region, 313, with no neighbours;

(code for plot: ran by too fast)
- once written, use `#| eval: false` to deactivate other code chunks to prevent run 



- important to show one specific area to see neighbour-matrix relations, use zoom
```{r}
#| code-fold: true
#| code-summary: "show code"
#| eval: false
write_rds(mpsz_nb, "data/rds/mpsz_nb.rds")
```




- import odbus6_9

```{r}
#| code-fold: true
#| code-summary: "show code"
#| eval: false
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")

busstop_mpsz <- st_intersection(busstop, mpsz) %>% 
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry

busstop_mpsz
```

- check duplicates
  - when replacing ODflow with busstop:subzone data, there are duplicates
  - duplicates will repeat

```{r}
#| code-fold: true
#| code-summary: "show code"
#| eval: false
# 
# section breezed by too fast
# od_data <- left_join ...
# 

# code block to remove duplicates
# duplicate <- od_data %>%
#   group_by_all() %>%
#   filter(n()>1), %>%
#   ungroup() 


# code chunk: read from od_data.rds
od_data <- read_rds("data/rds/od_data.rds")
```

## Create distnance matrix

-   turn `mpsz` into sp object, create flowdata, distpair, etc etc 
- after many steps, saved as mpsz_flow.rds
- note that we don't need to filter out intrazonal flow;


- recap:
  - mpsz_nb     : weight matrix
    - list of 3 weight matrices, by contiguity/distance/knn
  - mpsz_flow   : od flow data
    - origin sz / destin sz / distance / trips
    - important to convert grid_id to character or destination field
    - if distance == 0, intrazonal flow
  - mpsz_var    : explanatory variables 

```{r}
#| code-fold: true
#| code-summary: "show code"

mpsz_nb <- read_rds("data/rds/mpsz_nb.rds")
mpsz_flow <- read_rds("data/rds/mpsz_flow.rds")
mpsz_var <- read_rds("data/rds/mpsz_var.rds")
```


## Create `spflow_network-class` objects:
- combines nb-weight matrix with flow data;
- we use **contiguity**
  - instead of by fixed distance, with one orphan


```{r}
#| code-fold: true
#| code-summary: "show code"

mpsz_net <- spflow_network(
  id_net = "sg",
  node_neighborhood = nb2mat(mpsz_nb$by_contiguity),
  node_data = mpsz_var,
  node_key_column = "SZ_CODE")
mpsz_net
```


- create network pairs 

```{r}
#| code-fold: true
#| code-summary: "show code"

mpsz_net_pairs <- spflow_network_pair(
  id_orig_net = "sg", 
  id_dest_net = "sg", 
  pair_data = mpsz_flow,
  orig_key_column = "ORIGIN_SZ",
  dest_key_column = "DESTIN_SZ"
)
mpsz_net_pairs
```


- create network pairs 
- large object class, flow network 
  - consumes pair_data dataframe, but structured to work with code object

```{r}
#| code-fold: true
#| code-summary: "show code"

mpsz_net_pairs <- spflow_network_pair(
  id_orig_net = "sg", 
  id_dest_net = "sg", 
  pair_data = mpsz_flow,
  orig_key_column = "ORIGIN_SZ",
  dest_key_column = "DESTIN_SZ"
)
mpsz_net_pairs
```


- last step: create multi net
  - combine network and network pairs objects 
- "hide all the low-level code by using object structure"
  - by right, flow should be n by n; 313**2 is 97969
  - error messages commonly due to duplicates and redundant data

```{r}
#| code-fold: true
#| code-summary: "show code"

mpsz_multi_net <- spflow_network_multi(
  mpsz_net, 
  mpsz_net_pairs
)
mpsz_multi_net
```


## Check for multicollinearity
- By right, we should check for correlation analysis
    - bigger problem for explanatory models than predictive models;
    - Econometric models are explanatory, so need to be more stringent, in order to avoid bias
- use `pair_cor()` and `cor_image()` to create a correlogram
    - population by ages (12, 13-24, 25-64) highly correlated, so we should either combine or take only one
- from corrplot: can see coefficients of independent variables (correlation with final row, dependent variable Y)
    - from observation, most independent variables are nonwhite nonzero 


```{r}
#| code-fold: true
#| code-summary: "show code"

cor_formula <- log(1+TRIPS) ~ # dependent variable; usually flow; add 1 to avoid log-zero issue
  BUSSTOP_COUNT + 
  AGE7_12 +
  AGE13_24 + 
  AGE25_64 +
  SCHOOL_COUNT +
  BUSINESS_COUNT + 
  RETAILS_COUNT +
  FINSERV_COUNT +
  P_(log(DISTANCE + 1)) # p for impedance, negative correlation eg cost/time/distance

cor_mat <- pair_cor(
  mpsz_multi_net,
  spflow_formula = cor_formula,
  add_lags_x = FALSE
)

colnames(cor_mat) <- paste0(
  substr(
    colnames(cor_mat), 1, 3), "...")
cor_image(cor_mat) # use corr_plot package
```


- Now use spflow to calibrate 9 models 
  - based on 3 statistical algorithms;
    - maximum likelihood estimation, mle
    - spatial two-stage lesat-squares s2sls
    - Bayesian Markov Chain Monte carlo MCMC
  - default "estimation_method="mle""

- note the use of `O_()`, `D_()` and `P_()` to denote and mark origin/destination/impedance variables
  - "DISTANCE + 1" to avoid 0-values for intrazonal flow distance == 0 

```{r}
#| code-fold: true
#| code-summary: "show code"
base_model <- spflow(
  spflow_formula = log(1+TRIPS) ~
    O_(BUSSTOP_COUNT +
         AGE25_64) + 
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT +
         FINSERV_COUNT) +
    P_(log(DISTANCE +1)),
  spflow_networks = mpsz_multi_net
)
base_model
```

- note use of model9 by default
- note `D_SCHOOL_COUNT` is statistically significant, but `...lag1` is not;
  schools affect the subzone they are in but not the neighbour subzone
  - similarly, RETAILS_COUNT nor does not affect subzone
  - however, FINSERV and lag1 do affect subzone

- plot moran


```{r}
#| code-fold: true
#| code-summary: "show code"
old_par <- par(mfrow = c(1, 3),
               mar = c(2,2,2,2))
spflow_moran_plots(base_model)
par(old_par)
```

- reperform pair plot;
  - this time, we just feed in model, don't need to rewrite equation
- now we want to observe the residuals of d, o, w

```{r}
#| code-fold: true
#| code-summary: "show code"
corr_residual <- pair_cor(base_model)
colnames(corr_residual) <- substr(colnames(corr_residual), 1, 3)
cor_image(corr_residual)
```

- Alternative code control;
  - state spflow_formula and model_control separately
  - assemble using sp_flow
- lag for school is statistically signiicant 
```{r}
#| code-fold: true
#| code-summary: "show code"
spflow_formula <- log(1+TRIPS) ~
    O_(BUSSTOP_COUNT +
         AGE25_64) + 
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT +
         FINSERV_COUNT) +
    P_(log(DISTANCE +1))

model_control <- spflow_control(
  estimation_method = "mle", 
  model = "model_1")

mle_model1 <- spflow(
  spflow_formula,
  spflow_networks = mpsz_multi_net,
  estimation_control = model_control
)

mle_model1
```


- to create alternative model, simply change model_control(model=) name 
  - eg changed to model_2, focuses on destination 
- unconstrainted performs poorest, ori/desti constrained performs better

- 8: restricted, filtered, takes into account intrazonal flows
- 9: unrestricted